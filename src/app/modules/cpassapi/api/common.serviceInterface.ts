/*
* SPDX-FileCopyrightText: Copyright 2019 - 2020 | CSI Piemonte
* SPDX-License-Identifier: EUPL-1.2
*/
/**
 * Contabilità passiva
 * API per il backend della suite di contabilità passiva.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { ApiError } from '../model/apiError';
import { DocumentoSpesa } from '../model/documentoSpesa';
import { Elaborazione } from '../model/elaborazione';
import { Fornitore } from '../model/fornitore';
import { ListinoFornitore } from '../model/listinoFornitore';
import { MetadatiFunzione } from '../model/metadatiFunzione';
import { PagedResponseFornitore } from '../model/pagedResponseFornitore';
import { PagedResponseSettore } from '../model/pagedResponseSettore';
import { Settore } from '../model/settore';
import { SettoreIndirizzo } from '../model/settoreIndirizzo';
import { Ufficio } from '../model/ufficio';


import { Configuration }                                     from '../configuration';


export interface CommonServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    

    /**
    * 
    * Restituisce i metadati della specifica funzione
    * @param modulo modulo.
    * @param funzione funzione.
    */
    getMetadatiByModuoloFunzione(modulo: string, funzione: string, extraHttpRequestParams?: any): Observable<Array<MetadatiFunzione>>;

    /**
    * 
    * Restituisce sla lista dei settori parenti
    * @param id_settore id settore.
    */
    getMySectorFamily(id_settore: string, extraHttpRequestParams?: any): Observable<Array<Settore>>;

    /**
    * 
    * estrai ordinamento
    * @param modulo modulo.
    * @param funzione funzione.
    * @param tipo tipo.
    * @param listMetadatiFunzione 
    */
    getOrdinamentoByModuloFunzioneTipo(modulo: string, funzione: string, tipo: 'JPQL' | 'SQL', listMetadatiFunzione: Array<MetadatiFunzione>, extraHttpRequestParams?: any): Observable<string>;

    /**
    * 
    * Restituisce l&#39;alberatura Settore per ente.
    * @param id_ente id ente.
    */
    getSettoreTreeByEnte(id_ente: string, extraHttpRequestParams?: any): Observable<Array<Settore>>;

    /**
    * 
    * Restituisce gli Uffici del settore registrati su sistema.
    * @param id_settore id settore.
    */
    getUfficiBySettore(id_settore: string, extraHttpRequestParams?: any): Observable<Array<Ufficio>>;

    /**
    * 
    * Restituisce se un settore è parente di un&#39;altro.
    * @param id_settore id settore.
    * @param id_settore_parent id settore parent.
    */
    isMySectorParent(id_settore: string, id_settore_parent: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * 
    * inserisce listino fornitore su sistema.
    * @param listinoFornitore 
    */
    postListinoFornitore(listinoFornitore: ListinoFornitore, extraHttpRequestParams?: any): Observable<PagedResponseFornitore>;

    /**
    * 
    * Ricerca documenti spesa presenti a sistema.
    * @param ds 
    */
    postRicercaDocumentoSpesa(ds: DocumentoSpesa, extraHttpRequestParams?: any): Observable<Array<DocumentoSpesa>>;

    /**
    * 
    * Ricerca documenti spesa presenti a sistema con stato ripartibile
    * @param ds 
    */
    postRicercaDocumentoSpesaRipartibile(ds: DocumentoSpesa, extraHttpRequestParams?: any): Observable<Array<DocumentoSpesa>>;

    /**
    * 
    * Ricerca elaborazioni su sistema locale
    * @param elaborazione 
    */
    postRicercaElaborazioneProgramma(elaborazione: Elaborazione, extraHttpRequestParams?: any): Observable<Array<Elaborazione>>;

    /**
    * 
    * Ricerca fornitori su sistema.
    * @param fornitore 
    * @param offset Il numero di record da ignorare prima di iniziare a raccogliere i risultati.
    * @param limit Il numero di record da restituire.
    * @param sort Il campo di sort.
    * @param direction La direzione di sort.
    */
    postRicercaFornitore(fornitore: Fornitore, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', extraHttpRequestParams?: any): Observable<PagedResponseFornitore>;

    /**
    * 
    * Ricerca fornitori su sistema locale
    * @param fornitore 
    */
    postRicercaFornitoreInterno(fornitore: Fornitore, extraHttpRequestParams?: any): Observable<Array<Fornitore>>;

    /**
    * 
    * Ricerca listino fornitori su sistema.
    * @param listinoFornitore 
    * @param offset Il numero di record da ignorare prima di iniziare a raccogliere i risultati.
    * @param limit Il numero di record da restituire.
    * @param sort Il campo di sort.
    * @param direction La direzione di sort.
    */
    postRicercaListinoFornitore(listinoFornitore: ListinoFornitore, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', extraHttpRequestParams?: any): Observable<PagedResponseFornitore>;

    /**
    * 
    * Ricerca settori su sistema.
    * @param settore 
    * @param offset Il numero di record da ignorare prima di iniziare a raccogliere i risultati.
    * @param limit Il numero di record da restituire.
    * @param sort Il campo di sort.
    * @param direction La direzione di sort.
    */
    postRicercaSettore(settore: Settore, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', extraHttpRequestParams?: any): Observable<PagedResponseSettore>;

    /**
    * 
    * Ricerca indirizzi su sistema.
    * @param settore 
    */
    postRicercaSettoreIndirizzo(settore: Settore, extraHttpRequestParams?: any): Observable<Array<SettoreIndirizzo>>;

    /**
    * 
    * Test di parsing mappa.
    * @param preferenze 
    */
    postSavePreferenze(preferenze: any, extraHttpRequestParams?: any): Observable<{}>;

}
