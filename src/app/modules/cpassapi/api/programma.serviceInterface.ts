/*
* SPDX-FileCopyrightText: Copyright 2019 - 2020 | CSI Piemonte
* SPDX-License-Identifier: EUPL-1.2
*/
/**
 * Contabilità passiva
 * API per il backend della suite di contabilità passiva.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { ApiError } from '../model/apiError';
import { Ente } from '../model/ente';
import { Programma } from '../model/programma';


import { Configuration }                                     from '../configuration';


export interface ProgrammaServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    

    /**
    * 
    * Cancella l&#39;programma per id.
    * @param id L&#39;id dell&#39;programma.
    */
    deleteProgrammaById(id: string, extraHttpRequestParams?: any): Observable<string>;

    /**
    * 
    * Restituisce l&#39;ente per id.
    * @param id L&#39;id dell&#39;ente.
    */
    getEnteById(id: string, extraHttpRequestParams?: any): Observable<Ente>;

    /**
    * 
    * Restituisce il programma per id.
    * @param id L&#39;id dell&#39;programma.
    */
    getProgrammaById(id: string, extraHttpRequestParams?: any): Observable<Programma>;

    /**
    * 
    * Restituisce i programmi di un determinato settore.
    * @param id_settore L&#39;id del settore dell&#39;utente.
    * @param validi L&#39;id del settore dell&#39;utente.
    */
    getProgrammiBySettore(id_settore: string, validi: boolean, extraHttpRequestParams?: any): Observable<Array<Programma>>;

    /**
    * 
    * Restituisce i programmi di un determinato settore.
    * @param id_settore L&#39;id del settore dell&#39;utente.
    * @param stato_code codice dello stato
    */
    getProgrammiBySettoreAndStato(id_settore: string, stato_code: string, extraHttpRequestParams?: any): Observable<Array<Programma>>;

    /**
    * 
    * Restituisce il programma di un determinato settore per quell&#39;anno non annullato
    * @param id_settore L&#39;id del settore dell&#39;utente.
    * @param anno anno del programma.
    * @param versione versione del programma.
    */
    getProgrammiBySettoreAnnoVersione(id_settore: string, anno: number, versione: number, extraHttpRequestParams?: any): Observable<Array<Programma>>;

    /**
    * 
    * Gets the Programmi che si possono trasmettere al ministero
    */
    getProgrammiTrasmissioneMIT(extraHttpRequestParams?: any): Observable<Array<Programma>>;

    /**
    * 
    * Restituisce gli ultimi programmi di un determinato settore.
    * @param id_settore L&#39;id del settore dell&#39;utente.
    * @param stato_code codice dello stato
    */
    getUltimiProgrammiBySettoreAndStato(id_settore: string, stato_code: string, extraHttpRequestParams?: any): Observable<Array<Programma>>;

    /**
    * 
    * Inserisce un programma su sistema.
    * @param programma 
    */
    postProgramma(programma: Programma, extraHttpRequestParams?: any): Observable<Programma>;

    /**
    * 
    * Copia un programma su sistema.
    * @param soloControlli Se il servizio deve effettuare i soli controlli precedenti la copia.
    * @param programma 
    */
    postProgrammaCopia(soloControlli: boolean, programma: Programma, extraHttpRequestParams?: any): Observable<Programma>;

    /**
    * 
    * Aggiorna il programma per id.
    * @param id id del programma.
    * @param programma 
    */
    putProgrammaById(id: string, programma: Programma, extraHttpRequestParams?: any): Observable<Programma>;

    /**
    * 
    * Aggiorna lo stato programma per id.
    * @param id L&#39;id dell&#39;programma di cui cambio lo stato.
    * @param programma 
    */
    putProgrammaStatoAnnullatoById(id: string, programma: Programma, extraHttpRequestParams?: any): Observable<Programma>;

    /**
    * 
    * Aggiorna lo stato programma per id.
    * @param id L&#39;id dell&#39;programma di cui cambio lo stato.
    * @param ignoreWarning Per ignorare i warning in fase di controllo.
    * @param programma 
    */
    putProgrammaStatoConfermatoById(id: string, ignoreWarning: boolean, programma: Programma, extraHttpRequestParams?: any): Observable<Programma>;

    /**
    * 
    * Aggiorna lo stato programma per id.
    * @param id L&#39;id dell&#39;programma di cui cambio lo stato.
    * @param programma 
    */
    putProgrammaStatoRiportaInBozzaById(id: string, programma: Programma, extraHttpRequestParams?: any): Observable<Programma>;

    /**
    * 
    * Per trasmettere un programma al ministero
    * @param id_programma L&#39;id del programma.
    * @param id_utente L&#39;id dell&#39;utente.
    * @param modalita_invio Modalita invio al ministero.
    */
    putTrasmettiProgrammaById(id_programma: string, id_utente: string, modalita_invio: string, extraHttpRequestParams?: any): Observable<{}>;

}
