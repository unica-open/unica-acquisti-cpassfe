/*
* SPDX-FileCopyrightText: Copyright 2019 - 2020 | CSI Piemonte
* SPDX-License-Identifier: EUPL-1.2
*/
/**
 * Contabilità passiva
 * API per il backend della suite di contabilità passiva.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ApiError } from '../model/apiError';
import { Destinatario } from '../model/destinatario';
import { FiltroImpegni } from '../model/filtroImpegni';
import { Impegno } from '../model/impegno';
import { PagedResponseImpegno } from '../model/pagedResponseImpegno';
import { PagedResponseOrdine } from '../model/pagedResponseOrdine';
import { PagedResponseProvvedimento } from '../model/pagedResponseProvvedimento';
import { Provvedimento } from '../model/provvedimento';
import { RicercaOrdini } from '../model/ricercaOrdini';
import { RicercaRigheDaEvadere } from '../model/ricercaRigheDaEvadere';
import { RiepilogoImpegni } from '../model/riepilogoImpegni';
import { RigaOrdine } from '../model/rigaOrdine';
import { SalvaImpegni } from '../model/salvaImpegni';
import { TestataOrdine } from '../model/testataOrdine';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration, FormParams }                         from '../configuration';
import { TestataOrdineServiceInterface }                            from './testataOrdine.serviceInterface';


@Injectable()
export class TestataOrdineService implements TestataOrdineServiceInterface {

    protected basePath = 'http://localhost:8080/cpassbe/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Elimina il destinatario di una testata ordine presente a sistema.
     * @param id L&#39;id della riga.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteDestinatario(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteDestinatario(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteDestinatario(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteDestinatario(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteDestinatario.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/ord/testata-ordine/destinatario/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Elimina gli impegni di una riga presente a sistema.
     * @param riga_ordine_id L&#39;id della riga.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteImpegniByRiga(riga_ordine_id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteImpegniByRiga(riga_ordine_id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteImpegniByRiga(riga_ordine_id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteImpegniByRiga(riga_ordine_id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (riga_ordine_id === null || riga_ordine_id === undefined) {
            throw new Error('Required parameter riga_ordine_id was null or undefined when calling deleteImpegniByRiga.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/ord/testata-ordine/impegni/${encodeURIComponent(String(riga_ordine_id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Elimina la riga di una testata ordine presente a sistema.
     * @param id L&#39;id della riga.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteRigaOrdine(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteRigaOrdine(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteRigaOrdine(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteRigaOrdine(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteRigaOrdine.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/ord/testata-ordine/riga-ordine/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Cancella l&#39;ordine per id.
     * @param id L&#39;id della testata ordine.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteTestataOrdineById(id: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public deleteTestataOrdineById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public deleteTestataOrdineById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public deleteTestataOrdineById(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteTestataOrdineById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<string>(`${this.basePath}/ord/testata-ordine/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce i destinatari legati a un ordine con almeno una riga.
     * @param idOrdine L&#39;id della testata ordine.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRicercaDestinatariPerCopia(idOrdine: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Destinatario>>;
    public getRicercaDestinatariPerCopia(idOrdine: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Destinatario>>>;
    public getRicercaDestinatariPerCopia(idOrdine: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Destinatario>>>;
    public getRicercaDestinatariPerCopia(idOrdine: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idOrdine === null || idOrdine === undefined) {
            throw new Error('Required parameter idOrdine was null or undefined when calling getRicercaDestinatariPerCopia.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Destinatario>>(`${this.basePath}/ord/testata-ordine/ricerca/destinatari-per-copia/${encodeURIComponent(String(idOrdine))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce gli impegni legati a una riga.
     * @param id L&#39;id della riga.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRicercaImpegniByRiga(id: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Impegno>>;
    public getRicercaImpegniByRiga(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Impegno>>>;
    public getRicercaImpegniByRiga(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Impegno>>>;
    public getRicercaImpegniByRiga(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getRicercaImpegniByRiga.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Impegno>>(`${this.basePath}/ord/testata-ordine/ricerca/impegni-riga/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce gli ordini registrati su sistema.
     * @param ricercaOrdini 
     * @param offset Il numero di record da ignorare prima di iniziare a raccogliere i risultati.
     * @param limit Il numero di record da restituire.
     * @param sort Il campo di sort.
     * @param direction La direzione di sort.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRicercaOrdini(ricercaOrdini: RicercaOrdini, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', observe?: 'body', reportProgress?: boolean): Observable<PagedResponseOrdine>;
    public getRicercaOrdini(ricercaOrdini: RicercaOrdini, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResponseOrdine>>;
    public getRicercaOrdini(ricercaOrdini: RicercaOrdini, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResponseOrdine>>;
    public getRicercaOrdini(ricercaOrdini: RicercaOrdini, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (ricercaOrdini === null || ricercaOrdini === undefined) {
            throw new Error('Required parameter ricercaOrdini was null or undefined when calling getRicercaOrdini.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (direction !== undefined && direction !== null) {
            queryParameters = queryParameters.set('direction', <any>direction);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PagedResponseOrdine>(`${this.basePath}/ord/testata-ordine/ricerca`,
            ricercaOrdini,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce le righe legate a un destinatario.
     * @param id L&#39;id del destinatario.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRicercaRigheByDestinatario(id: string, observe?: 'body', reportProgress?: boolean): Observable<Array<RigaOrdine>>;
    public getRicercaRigheByDestinatario(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<RigaOrdine>>>;
    public getRicercaRigheByDestinatario(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<RigaOrdine>>>;
    public getRicercaRigheByDestinatario(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getRicercaRigheByDestinatario.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<RigaOrdine>>(`${this.basePath}/ord/testata-ordine/ricerca/righe-destinatario/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce le righe ordine da evadere.
     * @param ricercaRigheDaEvadere 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRicercaRigheDaEvadere(ricercaRigheDaEvadere: RicercaRigheDaEvadere, observe?: 'body', reportProgress?: boolean): Observable<Array<RigaOrdine>>;
    public getRicercaRigheDaEvadere(ricercaRigheDaEvadere: RicercaRigheDaEvadere, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<RigaOrdine>>>;
    public getRicercaRigheDaEvadere(ricercaRigheDaEvadere: RicercaRigheDaEvadere, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<RigaOrdine>>>;
    public getRicercaRigheDaEvadere(ricercaRigheDaEvadere: RicercaRigheDaEvadere, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (ricercaRigheDaEvadere === null || ricercaRigheDaEvadere === undefined) {
            throw new Error('Required parameter ricercaRigheDaEvadere was null or undefined when calling getRicercaRigheDaEvadere.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<RigaOrdine>>(`${this.basePath}/ord/testata-ordine/ricerca/righe-da-evadere`,
            ricercaRigheDaEvadere,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce la testataOrdine per anno e numero e ente.
     * @param anno L&#39;anno della testata ordine.
     * @param numero Il numero della testataOrdine.
     * @param idEnte L&#39;id dell&#39;ente associato all&#39;utente.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRicercaTestataOrdineByAnnoENum(anno: number, numero: number, idEnte: string, observe?: 'body', reportProgress?: boolean): Observable<TestataOrdine>;
    public getRicercaTestataOrdineByAnnoENum(anno: number, numero: number, idEnte: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TestataOrdine>>;
    public getRicercaTestataOrdineByAnnoENum(anno: number, numero: number, idEnte: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TestataOrdine>>;
    public getRicercaTestataOrdineByAnnoENum(anno: number, numero: number, idEnte: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (anno === null || anno === undefined) {
            throw new Error('Required parameter anno was null or undefined when calling getRicercaTestataOrdineByAnnoENum.');
        }
        if (numero === null || numero === undefined) {
            throw new Error('Required parameter numero was null or undefined when calling getRicercaTestataOrdineByAnnoENum.');
        }
        if (idEnte === null || idEnte === undefined) {
            throw new Error('Required parameter idEnte was null or undefined when calling getRicercaTestataOrdineByAnnoENum.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TestataOrdine>(`${this.basePath}/ord/testata-ordine/ricerca/${encodeURIComponent(String(anno))}/${encodeURIComponent(String(numero))}/${encodeURIComponent(String(idEnte))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce impegni della testata Ordine per id.
     * @param id L&#39;id della testataOrdine.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRiepilogoImpegniByOrdineId(id: string, observe?: 'body', reportProgress?: boolean): Observable<RiepilogoImpegni>;
    public getRiepilogoImpegniByOrdineId(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RiepilogoImpegni>>;
    public getRiepilogoImpegniByOrdineId(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RiepilogoImpegni>>;
    public getRiepilogoImpegniByOrdineId(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getRiepilogoImpegniByOrdineId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<RiepilogoImpegni>(`${this.basePath}/ord/testata-ordine/riepilogo-impegni/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce la testataOrdine per id.
     * @param id L&#39;id della testataOrdine.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTestataOrdineById(id: string, observe?: 'body', reportProgress?: boolean): Observable<TestataOrdine>;
    public getTestataOrdineById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TestataOrdine>>;
    public getTestataOrdineById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TestataOrdine>>;
    public getTestataOrdineById(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getTestataOrdineById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TestataOrdine>(`${this.basePath}/ord/testata-ordine/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce le testate Ordine per id Destinatario evasione.
     * @param idDestinatarioEvasione L&#39;id del Destinatario evasione.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTestateOrdineByDestinatarioEvasioneId(idDestinatarioEvasione: string, observe?: 'body', reportProgress?: boolean): Observable<Array<TestataOrdine>>;
    public getTestateOrdineByDestinatarioEvasioneId(idDestinatarioEvasione: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TestataOrdine>>>;
    public getTestateOrdineByDestinatarioEvasioneId(idDestinatarioEvasione: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TestataOrdine>>>;
    public getTestateOrdineByDestinatarioEvasioneId(idDestinatarioEvasione: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idDestinatarioEvasione === null || idDestinatarioEvasione === undefined) {
            throw new Error('Required parameter idDestinatarioEvasione was null or undefined when calling getTestateOrdineByDestinatarioEvasioneId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TestataOrdine>>(`${this.basePath}/ord/testata-ordine/evasione-destinatario/${encodeURIComponent(String(idDestinatarioEvasione))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce le testate Ordine per id evasione.
     * @param idEvasione L&#39;id della testata evasione.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTestateOrdineByEvasioneId(idEvasione: string, observe?: 'body', reportProgress?: boolean): Observable<Array<TestataOrdine>>;
    public getTestateOrdineByEvasioneId(idEvasione: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TestataOrdine>>>;
    public getTestateOrdineByEvasioneId(idEvasione: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TestataOrdine>>>;
    public getTestateOrdineByEvasioneId(idEvasione: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idEvasione === null || idEvasione === undefined) {
            throw new Error('Required parameter idEvasione was null or undefined when calling getTestateOrdineByEvasioneId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TestataOrdine>>(`${this.basePath}/ord/testata-ordine/evasione-testata/${encodeURIComponent(String(idEvasione))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce le testate Ordine per id riga evasione.
     * @param idRigaEvasione L&#39;id della riga evasione.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTestateOrdineByRigaEvasioneId(idRigaEvasione: string, observe?: 'body', reportProgress?: boolean): Observable<Array<TestataOrdine>>;
    public getTestateOrdineByRigaEvasioneId(idRigaEvasione: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TestataOrdine>>>;
    public getTestateOrdineByRigaEvasioneId(idRigaEvasione: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TestataOrdine>>>;
    public getTestateOrdineByRigaEvasioneId(idRigaEvasione: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idRigaEvasione === null || idRigaEvasione === undefined) {
            throw new Error('Required parameter idRigaEvasione was null or undefined when calling getTestateOrdineByRigaEvasioneId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TestataOrdine>>(`${this.basePath}/ord/testata-ordine/evasione-riga/${encodeURIComponent(String(idRigaEvasione))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Annulla una testata ordine presente su sistema.
     * @param testataOrdine 
     * @param bypassControlli Permette di bypassare i controlli su un ordine da annullare.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postAnnullaTestataOrdine(testataOrdine: TestataOrdine, bypassControlli?: boolean, observe?: 'body', reportProgress?: boolean): Observable<TestataOrdine>;
    public postAnnullaTestataOrdine(testataOrdine: TestataOrdine, bypassControlli?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TestataOrdine>>;
    public postAnnullaTestataOrdine(testataOrdine: TestataOrdine, bypassControlli?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TestataOrdine>>;
    public postAnnullaTestataOrdine(testataOrdine: TestataOrdine, bypassControlli?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (testataOrdine === null || testataOrdine === undefined) {
            throw new Error('Required parameter testataOrdine was null or undefined when calling postAnnullaTestataOrdine.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (bypassControlli !== undefined && bypassControlli !== null) {
            queryParameters = queryParameters.set('bypassControlli', <any>bypassControlli);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<TestataOrdine>(`${this.basePath}/ord/testata-ordine/annulla`,
            testataOrdine,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Inserisce la riga ordine di una testata ordine su sistema.
     * @param idFrom L&#39;id del destinatario da cui copiare le righe.
     * @param idTo L&#39;id del destinatario a cui assegnare le righe copiate.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postCopiaRighe(idFrom: string, idTo: string, observe?: 'body', reportProgress?: boolean): Observable<Array<RigaOrdine>>;
    public postCopiaRighe(idFrom: string, idTo: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<RigaOrdine>>>;
    public postCopiaRighe(idFrom: string, idTo: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<RigaOrdine>>>;
    public postCopiaRighe(idFrom: string, idTo: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (idFrom === null || idFrom === undefined) {
            throw new Error('Required parameter idFrom was null or undefined when calling postCopiaRighe.');
        }
        if (idTo === null || idTo === undefined) {
            throw new Error('Required parameter idTo was null or undefined when calling postCopiaRighe.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<Array<RigaOrdine>>(`${this.basePath}/ord/testata-ordine/riga-ordine/copia/${encodeURIComponent(String(idFrom))}/${encodeURIComponent(String(idTo))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Inserisce gli impegni del dettaglio su sistema.
     * @param salvaImpegni 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postImpegni(salvaImpegni: SalvaImpegni, observe?: 'body', reportProgress?: boolean): Observable<RigaOrdine>;
    public postImpegni(salvaImpegni: SalvaImpegni, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RigaOrdine>>;
    public postImpegni(salvaImpegni: SalvaImpegni, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RigaOrdine>>;
    public postImpegni(salvaImpegni: SalvaImpegni, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (salvaImpegni === null || salvaImpegni === undefined) {
            throw new Error('Required parameter salvaImpegni was null or undefined when calling postImpegni.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<RigaOrdine>(`${this.basePath}/ord/testata-ordine/impegni`,
            salvaImpegni,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Inserisce il destinatario di una testata ordine su sistema.
     * @param destinatario 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postOrdineDestinatario(destinatario: Destinatario, observe?: 'body', reportProgress?: boolean): Observable<Destinatario>;
    public postOrdineDestinatario(destinatario: Destinatario, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Destinatario>>;
    public postOrdineDestinatario(destinatario: Destinatario, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Destinatario>>;
    public postOrdineDestinatario(destinatario: Destinatario, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (destinatario === null || destinatario === undefined) {
            throw new Error('Required parameter destinatario was null or undefined when calling postOrdineDestinatario.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Destinatario>(`${this.basePath}/ord/testata-ordine/destinatario`,
            destinatario,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Ricerca impegni su sistema.
     * @param filtroImpegni 
     * @param offset Il numero di record da ignorare prima di iniziare a raccogliere i risultati.
     * @param limit Il numero di record da restituire.
     * @param sort Il campo di sort.
     * @param direction La direzione di sort.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postRicercaImpegno(filtroImpegni: FiltroImpegni, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', observe?: 'body', reportProgress?: boolean): Observable<PagedResponseImpegno>;
    public postRicercaImpegno(filtroImpegni: FiltroImpegni, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResponseImpegno>>;
    public postRicercaImpegno(filtroImpegni: FiltroImpegni, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResponseImpegno>>;
    public postRicercaImpegno(filtroImpegni: FiltroImpegni, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (filtroImpegni === null || filtroImpegni === undefined) {
            throw new Error('Required parameter filtroImpegni was null or undefined when calling postRicercaImpegno.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (direction !== undefined && direction !== null) {
            queryParameters = queryParameters.set('direction', <any>direction);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PagedResponseImpegno>(`${this.basePath}/ord/testata-ordine/ricerca/impegno`,
            filtroImpegni,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Ricerca provvedimenti su sistema.
     * @param provvedimento 
     * @param offset Il numero di record da ignorare prima di iniziare a raccogliere i risultati.
     * @param limit Il numero di record da restituire.
     * @param sort Il campo di sort.
     * @param direction La direzione di sort.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postRicercaProvvedimento(provvedimento: Provvedimento, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', observe?: 'body', reportProgress?: boolean): Observable<PagedResponseProvvedimento>;
    public postRicercaProvvedimento(provvedimento: Provvedimento, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResponseProvvedimento>>;
    public postRicercaProvvedimento(provvedimento: Provvedimento, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResponseProvvedimento>>;
    public postRicercaProvvedimento(provvedimento: Provvedimento, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (provvedimento === null || provvedimento === undefined) {
            throw new Error('Required parameter provvedimento was null or undefined when calling postRicercaProvvedimento.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (direction !== undefined && direction !== null) {
            queryParameters = queryParameters.set('direction', <any>direction);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PagedResponseProvvedimento>(`${this.basePath}/ord/testata-ordine/ricerca/provvedimento`,
            provvedimento,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Inserisce la riga ordine di una testata ordine su sistema.
     * @param rigaOrdine 
     * @param bypassControlloIva Permette di bypassare il controllo sull&#39;iva quando l&#39;utente autorizza l&#39;operazione.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postRigaOrdine(rigaOrdine: RigaOrdine, bypassControlloIva?: boolean, observe?: 'body', reportProgress?: boolean): Observable<RigaOrdine>;
    public postRigaOrdine(rigaOrdine: RigaOrdine, bypassControlloIva?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RigaOrdine>>;
    public postRigaOrdine(rigaOrdine: RigaOrdine, bypassControlloIva?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RigaOrdine>>;
    public postRigaOrdine(rigaOrdine: RigaOrdine, bypassControlloIva?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (rigaOrdine === null || rigaOrdine === undefined) {
            throw new Error('Required parameter rigaOrdine was null or undefined when calling postRigaOrdine.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (bypassControlloIva !== undefined && bypassControlloIva !== null) {
            queryParameters = queryParameters.set('bypassControlloIva', <any>bypassControlloIva);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<RigaOrdine>(`${this.basePath}/ord/testata-ordine/riga-ordine`,
            rigaOrdine,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Inserisce una testata ordine su sistema.
     * @param testataOrdine 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postTestataOrdine(testataOrdine: TestataOrdine, observe?: 'body', reportProgress?: boolean): Observable<TestataOrdine>;
    public postTestataOrdine(testataOrdine: TestataOrdine, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TestataOrdine>>;
    public postTestataOrdine(testataOrdine: TestataOrdine, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TestataOrdine>>;
    public postTestataOrdine(testataOrdine: TestataOrdine, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (testataOrdine === null || testataOrdine === undefined) {
            throw new Error('Required parameter testataOrdine was null or undefined when calling postTestataOrdine.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<TestataOrdine>(`${this.basePath}/ord/testata-ordine`,
            testataOrdine,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Autorizza ordine.
     * @param id L&#39;id della testataOrdine.
     * @param testataOrdine 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putOrdineAutorizzaById(id: string, testataOrdine: TestataOrdine, observe?: 'body', reportProgress?: boolean): Observable<TestataOrdine>;
    public putOrdineAutorizzaById(id: string, testataOrdine: TestataOrdine, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TestataOrdine>>;
    public putOrdineAutorizzaById(id: string, testataOrdine: TestataOrdine, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TestataOrdine>>;
    public putOrdineAutorizzaById(id: string, testataOrdine: TestataOrdine, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putOrdineAutorizzaById.');
        }
        if (testataOrdine === null || testataOrdine === undefined) {
            throw new Error('Required parameter testataOrdine was null or undefined when calling putOrdineAutorizzaById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<TestataOrdine>(`${this.basePath}/ord/testata-ordine/autorizza/${encodeURIComponent(String(id))}`,
            testataOrdine,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Chiudi ordine.
     * @param id L&#39;id della testataOrdine.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putOrdineChiudiById(id: string, observe?: 'body', reportProgress?: boolean): Observable<TestataOrdine>;
    public putOrdineChiudiById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TestataOrdine>>;
    public putOrdineChiudiById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TestataOrdine>>;
    public putOrdineChiudiById(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putOrdineChiudiById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<TestataOrdine>(`${this.basePath}/ord/testata-ordine/chiudi/${encodeURIComponent(String(id))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Conferma ordine.
     * @param id L&#39;id della testataOrdine.
     * @param testataOrdine 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putOrdineConfermaById(id: string, testataOrdine: TestataOrdine, observe?: 'body', reportProgress?: boolean): Observable<TestataOrdine>;
    public putOrdineConfermaById(id: string, testataOrdine: TestataOrdine, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TestataOrdine>>;
    public putOrdineConfermaById(id: string, testataOrdine: TestataOrdine, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TestataOrdine>>;
    public putOrdineConfermaById(id: string, testataOrdine: TestataOrdine, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putOrdineConfermaById.');
        }
        if (testataOrdine === null || testataOrdine === undefined) {
            throw new Error('Required parameter testataOrdine was null or undefined when calling putOrdineConfermaById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<TestataOrdine>(`${this.basePath}/ord/testata-ordine/conferma/${encodeURIComponent(String(id))}`,
            testataOrdine,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Controlla ordine.
     * @param id L&#39;id della testataOrdine.
     * @param testataOrdine 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putOrdineControllaById(id: string, testataOrdine: TestataOrdine, observe?: 'body', reportProgress?: boolean): Observable<TestataOrdine>;
    public putOrdineControllaById(id: string, testataOrdine: TestataOrdine, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TestataOrdine>>;
    public putOrdineControllaById(id: string, testataOrdine: TestataOrdine, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TestataOrdine>>;
    public putOrdineControllaById(id: string, testataOrdine: TestataOrdine, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putOrdineControllaById.');
        }
        if (testataOrdine === null || testataOrdine === undefined) {
            throw new Error('Required parameter testataOrdine was null or undefined when calling putOrdineControllaById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<TestataOrdine>(`${this.basePath}/ord/testata-ordine/controlla/${encodeURIComponent(String(id))}`,
            testataOrdine,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Inserisce il destinatario di una testata ordine su sistema.
     * @param destinatario 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putOrdineDestinatario(destinatario: Destinatario, observe?: 'body', reportProgress?: boolean): Observable<Destinatario>;
    public putOrdineDestinatario(destinatario: Destinatario, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Destinatario>>;
    public putOrdineDestinatario(destinatario: Destinatario, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Destinatario>>;
    public putOrdineDestinatario(destinatario: Destinatario, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (destinatario === null || destinatario === undefined) {
            throw new Error('Required parameter destinatario was null or undefined when calling putOrdineDestinatario.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Destinatario>(`${this.basePath}/ord/testata-ordine/destinatario`,
            destinatario,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Invia ordine NSO.
     * @param id L&#39;id della testataOrdine.
     * @param testataOrdine 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putOrdineInviaNSO(id: string, testataOrdine: TestataOrdine, observe?: 'body', reportProgress?: boolean): Observable<TestataOrdine>;
    public putOrdineInviaNSO(id: string, testataOrdine: TestataOrdine, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TestataOrdine>>;
    public putOrdineInviaNSO(id: string, testataOrdine: TestataOrdine, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TestataOrdine>>;
    public putOrdineInviaNSO(id: string, testataOrdine: TestataOrdine, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putOrdineInviaNSO.');
        }
        if (testataOrdine === null || testataOrdine === undefined) {
            throw new Error('Required parameter testataOrdine was null or undefined when calling putOrdineInviaNSO.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<TestataOrdine>(`${this.basePath}/ord/testata-ordine/invia-nso/${encodeURIComponent(String(id))}`,
            testataOrdine,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Verifiche fattibilita chiudi ordine.
     * @param id L&#39;id della testataOrdine.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putOrdineVerificheFattibilitaChiudiById(id: string, observe?: 'body', reportProgress?: boolean): Observable<TestataOrdine>;
    public putOrdineVerificheFattibilitaChiudiById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TestataOrdine>>;
    public putOrdineVerificheFattibilitaChiudiById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TestataOrdine>>;
    public putOrdineVerificheFattibilitaChiudiById(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putOrdineVerificheFattibilitaChiudiById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<TestataOrdine>(`${this.basePath}/ord/testata-ordine/verifiche-fattibilita-chiudi/${encodeURIComponent(String(id))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Inserisce la riga ordine di una testata ordine su sistema.
     * @param rigaOrdine 
     * @param bypassControlloIva Permette di bypassare il controllo sull&#39;iva quando l&#39;utente autorizza l&#39;operazione.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putRigaOrdine(rigaOrdine: RigaOrdine, bypassControlloIva?: boolean, observe?: 'body', reportProgress?: boolean): Observable<RigaOrdine>;
    public putRigaOrdine(rigaOrdine: RigaOrdine, bypassControlloIva?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RigaOrdine>>;
    public putRigaOrdine(rigaOrdine: RigaOrdine, bypassControlloIva?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RigaOrdine>>;
    public putRigaOrdine(rigaOrdine: RigaOrdine, bypassControlloIva?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (rigaOrdine === null || rigaOrdine === undefined) {
            throw new Error('Required parameter rigaOrdine was null or undefined when calling putRigaOrdine.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (bypassControlloIva !== undefined && bypassControlloIva !== null) {
            queryParameters = queryParameters.set('bypassControlloIva', <any>bypassControlloIva);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<RigaOrdine>(`${this.basePath}/ord/testata-ordine/riga-ordine`,
            rigaOrdine,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Aggiorna la testataOrdine per id.
     * @param id L&#39;id della testataOrdine.
     * @param testataOrdine 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putTestataOrdineById(id: string, testataOrdine: TestataOrdine, observe?: 'body', reportProgress?: boolean): Observable<TestataOrdine>;
    public putTestataOrdineById(id: string, testataOrdine: TestataOrdine, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TestataOrdine>>;
    public putTestataOrdineById(id: string, testataOrdine: TestataOrdine, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TestataOrdine>>;
    public putTestataOrdineById(id: string, testataOrdine: TestataOrdine, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putTestataOrdineById.');
        }
        if (testataOrdine === null || testataOrdine === undefined) {
            throw new Error('Required parameter testataOrdine was null or undefined when calling putTestataOrdineById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<TestataOrdine>(`${this.basePath}/ord/testata-ordine/${encodeURIComponent(String(id))}`,
            testataOrdine,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
