/*
* SPDX-FileCopyrightText: Copyright 2019 - 2020 | CSI Piemonte
* SPDX-License-Identifier: EUPL-1.2
*/
/**
 * Contabilità passiva
 * API per il backend della suite di contabilità passiva.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ApiError } from '../model/apiError';
import { ControllaEvasione } from '../model/controllaEvasione';
import { DestinatarioEvasione } from '../model/destinatarioEvasione';
import { ImpegnoEvasione } from '../model/impegnoEvasione';
import { PagedResponseEvasione } from '../model/pagedResponseEvasione';
import { RicercaEvasioni } from '../model/ricercaEvasioni';
import { RiepilogoFatturaEvasione } from '../model/riepilogoFatturaEvasione';
import { RigaEvasione } from '../model/rigaEvasione';
import { RigaOrdine } from '../model/rigaOrdine';
import { SalvaEvasione } from '../model/salvaEvasione';
import { SalvaImpegniEvasione } from '../model/salvaImpegniEvasione';
import { TestataEvasione } from '../model/testataEvasione';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration, FormParams }                         from '../configuration';
import { EvasioneServiceInterface }                            from './evasione.serviceInterface';


@Injectable()
export class EvasioneService implements EvasioneServiceInterface {

    protected basePath = 'http://localhost:8080/cpassbe/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Elimina il destinatario evasione di una testata evasione presente a sistema.
     * @param id L&#39;id del destinatario evasione.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteDestinatarioEvasione(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteDestinatarioEvasione(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteDestinatarioEvasione(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteDestinatarioEvasione(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteDestinatarioEvasione.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/ord/evasione/destinatario-evasione/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Elimina l&#39;evasione presente a sistema.
     * @param testata_evasione_id L&#39;id della testata evasione.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteEvasione(testata_evasione_id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteEvasione(testata_evasione_id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteEvasione(testata_evasione_id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteEvasione(testata_evasione_id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (testata_evasione_id === null || testata_evasione_id === undefined) {
            throw new Error('Required parameter testata_evasione_id was null or undefined when calling deleteEvasione.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/ord/evasione/evasione/${encodeURIComponent(String(testata_evasione_id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Elimina gli impegni evasione di una riga evasione presente a sistema.
     * @param riga_evasione_id L&#39;id della riga evasione.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteImpegniEvasioneByRiga(riga_evasione_id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteImpegniEvasioneByRiga(riga_evasione_id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteImpegniEvasioneByRiga(riga_evasione_id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteImpegniEvasioneByRiga(riga_evasione_id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (riga_evasione_id === null || riga_evasione_id === undefined) {
            throw new Error('Required parameter riga_evasione_id was null or undefined when calling deleteImpegniEvasioneByRiga.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/ord/evasione/impegni-evasione/${encodeURIComponent(String(riga_evasione_id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Elimina la riga evasione presente a sistema.
     * @param id L&#39;id della riga evasione.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteRigaEvasione(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteRigaEvasione(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteRigaEvasione(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteRigaEvasione(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteRigaEvasione.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/ord/evasione/riga-evasione/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce gli impegni legati a una riga evasione
     * @param id L&#39;id della riga evasione.
     * @param bDistribuzioneTotaleRigaSugliImpegni Per calcolare la Distribuzione Totale Riga Sugli Impegni.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEsposizioneImpegniByRigaOrdine(id: string, bDistribuzioneTotaleRigaSugliImpegni: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<ImpegnoEvasione>>;
    public getEsposizioneImpegniByRigaOrdine(id: string, bDistribuzioneTotaleRigaSugliImpegni: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ImpegnoEvasione>>>;
    public getEsposizioneImpegniByRigaOrdine(id: string, bDistribuzioneTotaleRigaSugliImpegni: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ImpegnoEvasione>>>;
    public getEsposizioneImpegniByRigaOrdine(id: string, bDistribuzioneTotaleRigaSugliImpegni: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getEsposizioneImpegniByRigaOrdine.');
        }
        if (bDistribuzioneTotaleRigaSugliImpegni === null || bDistribuzioneTotaleRigaSugliImpegni === undefined) {
            throw new Error('Required parameter bDistribuzioneTotaleRigaSugliImpegni was null or undefined when calling getEsposizioneImpegniByRigaOrdine.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ImpegnoEvasione>>(`${this.basePath}/ord/evasione/esposizione-impegni/${encodeURIComponent(String(id))}/${encodeURIComponent(String(bDistribuzioneTotaleRigaSugliImpegni))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce le evasioni registrate su sistema.
     * @param ricercaEvasioni 
     * @param offset Il numero di record da ignorare prima di iniziare a raccogliere i risultati.
     * @param limit Il numero di record da restituire.
     * @param sort Il campo di sort.
     * @param direction La direzione di sort.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRicercaEvasioni(ricercaEvasioni: RicercaEvasioni, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', observe?: 'body', reportProgress?: boolean): Observable<PagedResponseEvasione>;
    public getRicercaEvasioni(ricercaEvasioni: RicercaEvasioni, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResponseEvasione>>;
    public getRicercaEvasioni(ricercaEvasioni: RicercaEvasioni, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResponseEvasione>>;
    public getRicercaEvasioni(ricercaEvasioni: RicercaEvasioni, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (ricercaEvasioni === null || ricercaEvasioni === undefined) {
            throw new Error('Required parameter ricercaEvasioni was null or undefined when calling getRicercaEvasioni.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (direction !== undefined && direction !== null) {
            queryParameters = queryParameters.set('direction', <any>direction);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PagedResponseEvasione>(`${this.basePath}/ord/evasione/ricerca`,
            ricercaEvasioni,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce gli impegni legati a una riga evasione.
     * @param id L&#39;id della riga evasione.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRicercaImpegniByRigaEvasione(id: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ImpegnoEvasione>>;
    public getRicercaImpegniByRigaEvasione(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ImpegnoEvasione>>>;
    public getRicercaImpegniByRigaEvasione(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ImpegnoEvasione>>>;
    public getRicercaImpegniByRigaEvasione(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getRicercaImpegniByRigaEvasione.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ImpegnoEvasione>>(`${this.basePath}/ord/evasione/ricerca/impegni-riga-evasione/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce le righe legate a un destinatario.
     * @param id L&#39;id del destinatario.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRicercaRigheByDestinatario(id: string, observe?: 'body', reportProgress?: boolean): Observable<Array<RigaEvasione>>;
    public getRicercaRigheByDestinatario(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<RigaEvasione>>>;
    public getRicercaRigheByDestinatario(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<RigaEvasione>>>;
    public getRicercaRigheByDestinatario(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getRicercaRigheByDestinatario.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<RigaEvasione>>(`${this.basePath}/ord/evasione/ricerca/righe-destinatario-evasione/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce la testataEvasione per anno e numero e ente.
     * @param anno L&#39;anno della testata evasione.
     * @param numero Il numero della testata evasione.
     * @param idEnte L&#39;id dell&#39;ente associato all&#39;utente.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRicercaTestataEvasioneByAnnoENum(anno: number, numero: number, idEnte: string, observe?: 'body', reportProgress?: boolean): Observable<TestataEvasione>;
    public getRicercaTestataEvasioneByAnnoENum(anno: number, numero: number, idEnte: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TestataEvasione>>;
    public getRicercaTestataEvasioneByAnnoENum(anno: number, numero: number, idEnte: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TestataEvasione>>;
    public getRicercaTestataEvasioneByAnnoENum(anno: number, numero: number, idEnte: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (anno === null || anno === undefined) {
            throw new Error('Required parameter anno was null or undefined when calling getRicercaTestataEvasioneByAnnoENum.');
        }
        if (numero === null || numero === undefined) {
            throw new Error('Required parameter numero was null or undefined when calling getRicercaTestataEvasioneByAnnoENum.');
        }
        if (idEnte === null || idEnte === undefined) {
            throw new Error('Required parameter idEnte was null or undefined when calling getRicercaTestataEvasioneByAnnoENum.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TestataEvasione>(`${this.basePath}/ord/evasione/ricerca/${encodeURIComponent(String(anno))}/${encodeURIComponent(String(numero))}/${encodeURIComponent(String(idEnte))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce gli impegni legati a una testata evasione.
     * @param id L&#39;id della testata evasione.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRiepilogoFatturaByIdEvasione(id: string, observe?: 'body', reportProgress?: boolean): Observable<Array<RiepilogoFatturaEvasione>>;
    public getRiepilogoFatturaByIdEvasione(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<RiepilogoFatturaEvasione>>>;
    public getRiepilogoFatturaByIdEvasione(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<RiepilogoFatturaEvasione>>>;
    public getRiepilogoFatturaByIdEvasione(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getRiepilogoFatturaByIdEvasione.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<RiepilogoFatturaEvasione>>(`${this.basePath}/ord/evasione/riepilogo-fattura/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce le righe ordine
     * @param anno Anno ordine.
     * @param numero Numero ordine.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRigheOrdineDaEvadereByOrdineAnnoNumero(anno: number, numero: number, observe?: 'body', reportProgress?: boolean): Observable<Array<RigaOrdine>>;
    public getRigheOrdineDaEvadereByOrdineAnnoNumero(anno: number, numero: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<RigaOrdine>>>;
    public getRigheOrdineDaEvadereByOrdineAnnoNumero(anno: number, numero: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<RigaOrdine>>>;
    public getRigheOrdineDaEvadereByOrdineAnnoNumero(anno: number, numero: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (anno === null || anno === undefined) {
            throw new Error('Required parameter anno was null or undefined when calling getRigheOrdineDaEvadereByOrdineAnnoNumero.');
        }
        if (numero === null || numero === undefined) {
            throw new Error('Required parameter numero was null or undefined when calling getRigheOrdineDaEvadereByOrdineAnnoNumero.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<RigaOrdine>>(`${this.basePath}/ord/evasione/ordine/${encodeURIComponent(String(anno))}/${encodeURIComponent(String(numero))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce la testataEvasione per id.
     * @param id L&#39;id della testataEvasione.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTestataEvasioneById(id: string, observe?: 'body', reportProgress?: boolean): Observable<TestataEvasione>;
    public getTestataEvasioneById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TestataEvasione>>;
    public getTestataEvasioneById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TestataEvasione>>;
    public getTestataEvasioneById(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getTestataEvasioneById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TestataEvasione>(`${this.basePath}/ord/evasione/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Inserisce gli impegni evasione su sistema.
     * @param salvaImpegniEvasione 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postImpegniEvasione(salvaImpegniEvasione: SalvaImpegniEvasione, observe?: 'body', reportProgress?: boolean): Observable<Array<ImpegnoEvasione>>;
    public postImpegniEvasione(salvaImpegniEvasione: SalvaImpegniEvasione, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ImpegnoEvasione>>>;
    public postImpegniEvasione(salvaImpegniEvasione: SalvaImpegniEvasione, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ImpegnoEvasione>>>;
    public postImpegniEvasione(salvaImpegniEvasione: SalvaImpegniEvasione, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (salvaImpegniEvasione === null || salvaImpegniEvasione === undefined) {
            throw new Error('Required parameter salvaImpegniEvasione was null or undefined when calling postImpegniEvasione.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<ImpegnoEvasione>>(`${this.basePath}/ord/evasione/impegni-evasione`,
            salvaImpegniEvasione,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Inserisce una testata evasione su sistema.
     * @param salvaEvasione 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postTestataEvasione(salvaEvasione: SalvaEvasione, observe?: 'body', reportProgress?: boolean): Observable<TestataEvasione>;
    public postTestataEvasione(salvaEvasione: SalvaEvasione, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TestataEvasione>>;
    public postTestataEvasione(salvaEvasione: SalvaEvasione, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TestataEvasione>>;
    public postTestataEvasione(salvaEvasione: SalvaEvasione, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (salvaEvasione === null || salvaEvasione === undefined) {
            throw new Error('Required parameter salvaEvasione was null or undefined when calling postTestataEvasione.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<TestataEvasione>(`${this.basePath}/ord/evasione`,
            salvaEvasione,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Annulla evasione.
     * @param id L&#39;id della testataEvasione.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putEvasioneAnnullaById(id: string, observe?: 'body', reportProgress?: boolean): Observable<TestataEvasione>;
    public putEvasioneAnnullaById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TestataEvasione>>;
    public putEvasioneAnnullaById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TestataEvasione>>;
    public putEvasioneAnnullaById(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putEvasioneAnnullaById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<TestataEvasione>(`${this.basePath}/ord/evasione/annulla/${encodeURIComponent(String(id))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Autorizza evasione.
     * @param id L&#39;id della testataEvasione.
     * @param testataEvasione 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putEvasioneAutorizzaById(id: string, testataEvasione: TestataEvasione, observe?: 'body', reportProgress?: boolean): Observable<TestataEvasione>;
    public putEvasioneAutorizzaById(id: string, testataEvasione: TestataEvasione, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TestataEvasione>>;
    public putEvasioneAutorizzaById(id: string, testataEvasione: TestataEvasione, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TestataEvasione>>;
    public putEvasioneAutorizzaById(id: string, testataEvasione: TestataEvasione, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putEvasioneAutorizzaById.');
        }
        if (testataEvasione === null || testataEvasione === undefined) {
            throw new Error('Required parameter testataEvasione was null or undefined when calling putEvasioneAutorizzaById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<TestataEvasione>(`${this.basePath}/ord/evasione/autorizza/${encodeURIComponent(String(id))}`,
            testataEvasione,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Controlla evasione.
     * @param id L&#39;id della testataEvasione.
     * @param controllaEvasione 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putEvasioneControllaById(id: string, controllaEvasione: ControllaEvasione, observe?: 'body', reportProgress?: boolean): Observable<TestataEvasione>;
    public putEvasioneControllaById(id: string, controllaEvasione: ControllaEvasione, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TestataEvasione>>;
    public putEvasioneControllaById(id: string, controllaEvasione: ControllaEvasione, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TestataEvasione>>;
    public putEvasioneControllaById(id: string, controllaEvasione: ControllaEvasione, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putEvasioneControllaById.');
        }
        if (controllaEvasione === null || controllaEvasione === undefined) {
            throw new Error('Required parameter controllaEvasione was null or undefined when calling putEvasioneControllaById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<TestataEvasione>(`${this.basePath}/ord/evasione/controlla/${encodeURIComponent(String(id))}`,
            controllaEvasione,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Inserisce il destinatario di una testata evasione su sistema.
     * @param destinatarioEvasione 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putEvasioneDestinatario(destinatarioEvasione: DestinatarioEvasione, observe?: 'body', reportProgress?: boolean): Observable<DestinatarioEvasione>;
    public putEvasioneDestinatario(destinatarioEvasione: DestinatarioEvasione, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DestinatarioEvasione>>;
    public putEvasioneDestinatario(destinatarioEvasione: DestinatarioEvasione, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DestinatarioEvasione>>;
    public putEvasioneDestinatario(destinatarioEvasione: DestinatarioEvasione, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (destinatarioEvasione === null || destinatarioEvasione === undefined) {
            throw new Error('Required parameter destinatarioEvasione was null or undefined when calling putEvasioneDestinatario.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<DestinatarioEvasione>(`${this.basePath}/ord/evasione/destinatario`,
            destinatarioEvasione,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Invia Contabilita evasione.
     * @param id L&#39;id della testataEvasione.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putEvasioneInviaContabilitaById(id: string, observe?: 'body', reportProgress?: boolean): Observable<TestataEvasione>;
    public putEvasioneInviaContabilitaById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TestataEvasione>>;
    public putEvasioneInviaContabilitaById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TestataEvasione>>;
    public putEvasioneInviaContabilitaById(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putEvasioneInviaContabilitaById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<TestataEvasione>(`${this.basePath}/ord/evasione/invia-contabilita/${encodeURIComponent(String(id))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Verifiche Preliminari Annulla evasione.
     * @param id L&#39;id della testataEvasione.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putEvasioneVerifichePreliminariAnnullaById(id: string, observe?: 'body', reportProgress?: boolean): Observable<TestataEvasione>;
    public putEvasioneVerifichePreliminariAnnullaById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TestataEvasione>>;
    public putEvasioneVerifichePreliminariAnnullaById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TestataEvasione>>;
    public putEvasioneVerifichePreliminariAnnullaById(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putEvasioneVerifichePreliminariAnnullaById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<TestataEvasione>(`${this.basePath}/ord/evasione/verifiche-preliminari-annulla/${encodeURIComponent(String(id))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Aggiorna gli impegni evasione su sistema.
     * @param salvaImpegniEvasione 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putImpegniEvasione(salvaImpegniEvasione: SalvaImpegniEvasione, observe?: 'body', reportProgress?: boolean): Observable<Array<ImpegnoEvasione>>;
    public putImpegniEvasione(salvaImpegniEvasione: SalvaImpegniEvasione, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ImpegnoEvasione>>>;
    public putImpegniEvasione(salvaImpegniEvasione: SalvaImpegniEvasione, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ImpegnoEvasione>>>;
    public putImpegniEvasione(salvaImpegniEvasione: SalvaImpegniEvasione, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (salvaImpegniEvasione === null || salvaImpegniEvasione === undefined) {
            throw new Error('Required parameter salvaImpegniEvasione was null or undefined when calling putImpegniEvasione.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Array<ImpegnoEvasione>>(`${this.basePath}/ord/evasione/impegni-evasione`,
            salvaImpegniEvasione,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Aggiorna la testataEvasione per id.
     * @param id L&#39;id della testataEvasione.
     * @param testataEvasione 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putTestataEvasioneById(id: string, testataEvasione: TestataEvasione, observe?: 'body', reportProgress?: boolean): Observable<TestataEvasione>;
    public putTestataEvasioneById(id: string, testataEvasione: TestataEvasione, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TestataEvasione>>;
    public putTestataEvasioneById(id: string, testataEvasione: TestataEvasione, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TestataEvasione>>;
    public putTestataEvasioneById(id: string, testataEvasione: TestataEvasione, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putTestataEvasioneById.');
        }
        if (testataEvasione === null || testataEvasione === undefined) {
            throw new Error('Required parameter testataEvasione was null or undefined when calling putTestataEvasioneById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<TestataEvasione>(`${this.basePath}/ord/evasione/${encodeURIComponent(String(id))}`,
            testataEvasione,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Aggiorna la testataEvasione per i campi legati al Riepilogo Fattura in base all&#39;id della testata evasione.
     * @param id L&#39;id della testataEvasione.
     * @param testataEvasione 
     * @param bypass Attiva il bypass del controllo sulla tolleranza se l&#39;utente ha accettato di proseguire con l&#39;operazione nonostante il warning.
     * @param bypassFornitoreControl Attiva il bypass del controllo congruenza fornitori se l&#39;utente ha accettato di proseguire con l&#39;operazione nonostante il warning.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putTestataEvasionePerRiepilogoFattura(id: string, testataEvasione: TestataEvasione, bypass?: boolean, bypassFornitoreControl?: boolean, observe?: 'body', reportProgress?: boolean): Observable<TestataEvasione>;
    public putTestataEvasionePerRiepilogoFattura(id: string, testataEvasione: TestataEvasione, bypass?: boolean, bypassFornitoreControl?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TestataEvasione>>;
    public putTestataEvasionePerRiepilogoFattura(id: string, testataEvasione: TestataEvasione, bypass?: boolean, bypassFornitoreControl?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TestataEvasione>>;
    public putTestataEvasionePerRiepilogoFattura(id: string, testataEvasione: TestataEvasione, bypass?: boolean, bypassFornitoreControl?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putTestataEvasionePerRiepilogoFattura.');
        }
        if (testataEvasione === null || testataEvasione === undefined) {
            throw new Error('Required parameter testataEvasione was null or undefined when calling putTestataEvasionePerRiepilogoFattura.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (bypass !== undefined && bypass !== null) {
            queryParameters = queryParameters.set('bypass', <any>bypass);
        }
        if (bypassFornitoreControl !== undefined && bypassFornitoreControl !== null) {
            queryParameters = queryParameters.set('bypassFornitoreControl', <any>bypassFornitoreControl);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<TestataEvasione>(`${this.basePath}/ord/evasione/aggiorna-riepilogo-fattura/${encodeURIComponent(String(id))}`,
            testataEvasione,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
