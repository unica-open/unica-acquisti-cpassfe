/*
* SPDX-FileCopyrightText: Copyright 2019 - 2020 | CSI Piemonte
* SPDX-License-Identifier: EUPL-1.2
*/
/**
 * Contabilità passiva
 * API per il backend della suite di contabilità passiva.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { ApiError } from '../model/apiError';
import { Destinatario } from '../model/destinatario';
import { FiltroImpegni } from '../model/filtroImpegni';
import { Impegno } from '../model/impegno';
import { PagedResponseImpegno } from '../model/pagedResponseImpegno';
import { PagedResponseOrdine } from '../model/pagedResponseOrdine';
import { PagedResponseProvvedimento } from '../model/pagedResponseProvvedimento';
import { Provvedimento } from '../model/provvedimento';
import { RicercaOrdini } from '../model/ricercaOrdini';
import { RicercaRigheDaEvadere } from '../model/ricercaRigheDaEvadere';
import { RiepilogoImpegni } from '../model/riepilogoImpegni';
import { RigaOrdine } from '../model/rigaOrdine';
import { SalvaImpegni } from '../model/salvaImpegni';
import { TestataOrdine } from '../model/testataOrdine';


import { Configuration }                                     from '../configuration';


export interface TestataOrdineServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    

    /**
    * 
    * Elimina il destinatario di una testata ordine presente a sistema.
    * @param id L&#39;id della riga.
    */
    deleteDestinatario(id: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * 
    * Elimina gli impegni di una riga presente a sistema.
    * @param riga_ordine_id L&#39;id della riga.
    */
    deleteImpegniByRiga(riga_ordine_id: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * 
    * Elimina la riga di una testata ordine presente a sistema.
    * @param id L&#39;id della riga.
    */
    deleteRigaOrdine(id: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * 
    * Cancella l&#39;ordine per id.
    * @param id L&#39;id della testata ordine.
    */
    deleteTestataOrdineById(id: string, extraHttpRequestParams?: any): Observable<string>;

    /**
    * 
    * Restituisce i destinatari legati a un ordine con almeno una riga.
    * @param idOrdine L&#39;id della testata ordine.
    */
    getRicercaDestinatariPerCopia(idOrdine: string, extraHttpRequestParams?: any): Observable<Array<Destinatario>>;

    /**
    * 
    * Restituisce gli impegni legati a una riga.
    * @param id L&#39;id della riga.
    */
    getRicercaImpegniByRiga(id: string, extraHttpRequestParams?: any): Observable<Array<Impegno>>;

    /**
    * 
    * Restituisce gli ordini registrati su sistema.
    * @param ricercaOrdini 
    * @param offset Il numero di record da ignorare prima di iniziare a raccogliere i risultati.
    * @param limit Il numero di record da restituire.
    * @param sort Il campo di sort.
    * @param direction La direzione di sort.
    */
    getRicercaOrdini(ricercaOrdini: RicercaOrdini, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', extraHttpRequestParams?: any): Observable<PagedResponseOrdine>;

    /**
    * 
    * Restituisce le righe legate a un destinatario.
    * @param id L&#39;id del destinatario.
    */
    getRicercaRigheByDestinatario(id: string, extraHttpRequestParams?: any): Observable<Array<RigaOrdine>>;

    /**
    * 
    * Restituisce le righe ordine da evadere.
    * @param ricercaRigheDaEvadere 
    */
    getRicercaRigheDaEvadere(ricercaRigheDaEvadere: RicercaRigheDaEvadere, extraHttpRequestParams?: any): Observable<Array<RigaOrdine>>;

    /**
    * 
    * Restituisce la testataOrdine per anno e numero e ente.
    * @param anno L&#39;anno della testata ordine.
    * @param numero Il numero della testataOrdine.
    * @param idEnte L&#39;id dell&#39;ente associato all&#39;utente.
    */
    getRicercaTestataOrdineByAnnoENum(anno: number, numero: number, idEnte: string, extraHttpRequestParams?: any): Observable<TestataOrdine>;

    /**
    * 
    * Restituisce impegni della testata Ordine per id.
    * @param id L&#39;id della testataOrdine.
    */
    getRiepilogoImpegniByOrdineId(id: string, extraHttpRequestParams?: any): Observable<RiepilogoImpegni>;

    /**
    * 
    * Restituisce la testataOrdine per id.
    * @param id L&#39;id della testataOrdine.
    */
    getTestataOrdineById(id: string, extraHttpRequestParams?: any): Observable<TestataOrdine>;

    /**
    * 
    * Restituisce le testate Ordine per id Destinatario evasione.
    * @param idDestinatarioEvasione L&#39;id del Destinatario evasione.
    */
    getTestateOrdineByDestinatarioEvasioneId(idDestinatarioEvasione: string, extraHttpRequestParams?: any): Observable<Array<TestataOrdine>>;

    /**
    * 
    * Restituisce le testate Ordine per id evasione.
    * @param idEvasione L&#39;id della testata evasione.
    */
    getTestateOrdineByEvasioneId(idEvasione: string, extraHttpRequestParams?: any): Observable<Array<TestataOrdine>>;

    /**
    * 
    * Restituisce le testate Ordine per id riga evasione.
    * @param idRigaEvasione L&#39;id della riga evasione.
    */
    getTestateOrdineByRigaEvasioneId(idRigaEvasione: string, extraHttpRequestParams?: any): Observable<Array<TestataOrdine>>;

    /**
    * 
    * Annulla una testata ordine presente su sistema.
    * @param testataOrdine 
    * @param bypassControlli Permette di bypassare i controlli su un ordine da annullare.
    */
    postAnnullaTestataOrdine(testataOrdine: TestataOrdine, bypassControlli?: boolean, extraHttpRequestParams?: any): Observable<TestataOrdine>;

    /**
    * 
    * Inserisce la riga ordine di una testata ordine su sistema.
    * @param idFrom L&#39;id del destinatario da cui copiare le righe.
    * @param idTo L&#39;id del destinatario a cui assegnare le righe copiate.
    */
    postCopiaRighe(idFrom: string, idTo: string, extraHttpRequestParams?: any): Observable<Array<RigaOrdine>>;

    /**
    * 
    * Inserisce gli impegni del dettaglio su sistema.
    * @param salvaImpegni 
    */
    postImpegni(salvaImpegni: SalvaImpegni, extraHttpRequestParams?: any): Observable<RigaOrdine>;

    /**
    * 
    * Inserisce il destinatario di una testata ordine su sistema.
    * @param destinatario 
    */
    postOrdineDestinatario(destinatario: Destinatario, extraHttpRequestParams?: any): Observable<Destinatario>;

    /**
    * 
    * Ricerca impegni su sistema.
    * @param filtroImpegni 
    * @param offset Il numero di record da ignorare prima di iniziare a raccogliere i risultati.
    * @param limit Il numero di record da restituire.
    * @param sort Il campo di sort.
    * @param direction La direzione di sort.
    */
    postRicercaImpegno(filtroImpegni: FiltroImpegni, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', extraHttpRequestParams?: any): Observable<PagedResponseImpegno>;

    /**
    * 
    * Ricerca provvedimenti su sistema.
    * @param provvedimento 
    * @param offset Il numero di record da ignorare prima di iniziare a raccogliere i risultati.
    * @param limit Il numero di record da restituire.
    * @param sort Il campo di sort.
    * @param direction La direzione di sort.
    */
    postRicercaProvvedimento(provvedimento: Provvedimento, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', extraHttpRequestParams?: any): Observable<PagedResponseProvvedimento>;

    /**
    * 
    * Inserisce la riga ordine di una testata ordine su sistema.
    * @param rigaOrdine 
    * @param bypassControlloIva Permette di bypassare il controllo sull&#39;iva quando l&#39;utente autorizza l&#39;operazione.
    */
    postRigaOrdine(rigaOrdine: RigaOrdine, bypassControlloIva?: boolean, extraHttpRequestParams?: any): Observable<RigaOrdine>;

    /**
    * 
    * Inserisce una testata ordine su sistema.
    * @param testataOrdine 
    */
    postTestataOrdine(testataOrdine: TestataOrdine, extraHttpRequestParams?: any): Observable<TestataOrdine>;

    /**
    * 
    * Autorizza ordine.
    * @param id L&#39;id della testataOrdine.
    * @param testataOrdine 
    */
    putOrdineAutorizzaById(id: string, testataOrdine: TestataOrdine, extraHttpRequestParams?: any): Observable<TestataOrdine>;

    /**
    * 
    * Chiudi ordine.
    * @param id L&#39;id della testataOrdine.
    */
    putOrdineChiudiById(id: string, extraHttpRequestParams?: any): Observable<TestataOrdine>;

    /**
    * 
    * Conferma ordine.
    * @param id L&#39;id della testataOrdine.
    * @param testataOrdine 
    */
    putOrdineConfermaById(id: string, testataOrdine: TestataOrdine, extraHttpRequestParams?: any): Observable<TestataOrdine>;

    /**
    * 
    * Controlla ordine.
    * @param id L&#39;id della testataOrdine.
    * @param testataOrdine 
    */
    putOrdineControllaById(id: string, testataOrdine: TestataOrdine, extraHttpRequestParams?: any): Observable<TestataOrdine>;

    /**
    * 
    * Inserisce il destinatario di una testata ordine su sistema.
    * @param destinatario 
    */
    putOrdineDestinatario(destinatario: Destinatario, extraHttpRequestParams?: any): Observable<Destinatario>;

    /**
    * 
    * Invia ordine NSO.
    * @param id L&#39;id della testataOrdine.
    * @param testataOrdine 
    */
    putOrdineInviaNSO(id: string, testataOrdine: TestataOrdine, extraHttpRequestParams?: any): Observable<TestataOrdine>;

    /**
    * 
    * Verifiche fattibilita chiudi ordine.
    * @param id L&#39;id della testataOrdine.
    */
    putOrdineVerificheFattibilitaChiudiById(id: string, extraHttpRequestParams?: any): Observable<TestataOrdine>;

    /**
    * 
    * Inserisce la riga ordine di una testata ordine su sistema.
    * @param rigaOrdine 
    * @param bypassControlloIva Permette di bypassare il controllo sull&#39;iva quando l&#39;utente autorizza l&#39;operazione.
    */
    putRigaOrdine(rigaOrdine: RigaOrdine, bypassControlloIva?: boolean, extraHttpRequestParams?: any): Observable<RigaOrdine>;

    /**
    * 
    * Aggiorna la testataOrdine per id.
    * @param id L&#39;id della testataOrdine.
    * @param testataOrdine 
    */
    putTestataOrdineById(id: string, testataOrdine: TestataOrdine, extraHttpRequestParams?: any): Observable<TestataOrdine>;

}
