/*
* SPDX-FileCopyrightText: Copyright 2019 - 2020 | CSI Piemonte
* SPDX-License-Identifier: EUPL-1.2
*/
/**
 * Contabilità passiva
 * API per il backend della suite di contabilità passiva.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ApiError } from '../model/apiError';
import { Cpv } from '../model/cpv';
import { InterventiDaCopia } from '../model/interventiDaCopia';
import { Intervento } from '../model/intervento';
import { InterventoImporti } from '../model/interventoImporti';
import { PagedResponseIntervento } from '../model/pagedResponseIntervento';
import { StatoInterventoInfo } from '../model/statoInterventoInfo';
import { StoricoInterventoRup } from '../model/storicoInterventoRup';
import { WebInterventoFileHolder } from '../model/webInterventoFileHolder';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration, FormParams }                         from '../configuration';
import { InterventoServiceInterface }                            from './intervento.serviceInterface';


@Injectable()
export class InterventoService implements InterventoServiceInterface {

    protected basePath = 'http://localhost:8080/cpassbe/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Cancella l&#39;intervento per id.
     * @param id L&#39;id dell&#39;intervento.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteInterventoById(id: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public deleteInterventoById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public deleteInterventoById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public deleteInterventoById(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteInterventoById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<string>(`${this.basePath}/pba/intervento/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce una lista di cpv legati all intervento.
     * @param id L&#39;id dell intervento.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCpvsByInterventoId(id: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Cpv>>;
    public getCpvsByInterventoId(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cpv>>>;
    public getCpvsByInterventoId(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cpv>>>;
    public getCpvsByInterventoId(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCpvsByInterventoId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Cpv>>(`${this.basePath}/pba/intervento/cpvs/intervento/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce l&#39;intervento per cui.
     * @param cui Il cui dell&#39;intervento.
     * @param id_programma L&#39;uuid del programma.
     * @param id_settore L&#39;id del settore dell&#39;utente.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getInterventoByCui(cui: string, id_programma: string, id_settore: string, observe?: 'body', reportProgress?: boolean): Observable<Intervento>;
    public getInterventoByCui(cui: string, id_programma: string, id_settore: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Intervento>>;
    public getInterventoByCui(cui: string, id_programma: string, id_settore: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Intervento>>;
    public getInterventoByCui(cui: string, id_programma: string, id_settore: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (cui === null || cui === undefined) {
            throw new Error('Required parameter cui was null or undefined when calling getInterventoByCui.');
        }
        if (id_programma === null || id_programma === undefined) {
            throw new Error('Required parameter id_programma was null or undefined when calling getInterventoByCui.');
        }
        if (id_settore === null || id_settore === undefined) {
            throw new Error('Required parameter id_settore was null or undefined when calling getInterventoByCui.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Intervento>(`${this.basePath}/pba/intervento/cui/${encodeURIComponent(String(cui))}/programma/${encodeURIComponent(String(id_programma))}/settore/${encodeURIComponent(String(id_settore))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce l&#39;intervento per id.
     * @param id L&#39;id dell&#39;intervento.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getInterventoById(id: string, observe?: 'body', reportProgress?: boolean): Observable<Intervento>;
    public getInterventoById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Intervento>>;
    public getInterventoById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Intervento>>;
    public getInterventoById(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getInterventoById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Intervento>(`${this.basePath}/pba/intervento/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce gli importi per id intervento.
     * @param id L&#39;id dell&#39;intervento.
     * @param offset Il numero di record da ignorare prima di iniziare a raccogliere i risultati.
     * @param limit Il numero di record da restituire.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getInterventoImportiByIntervento(id: string, offset?: number, limit?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<InterventoImporti>>;
    public getInterventoImportiByIntervento(id: string, offset?: number, limit?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<InterventoImporti>>>;
    public getInterventoImportiByIntervento(id: string, offset?: number, limit?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<InterventoImporti>>>;
    public getInterventoImportiByIntervento(id: string, offset?: number, limit?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getInterventoImportiByIntervento.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<InterventoImporti>>(`${this.basePath}/pba/intervento/${encodeURIComponent(String(id))}/intervento-importi`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce gli interventi registrati su sistema.
     * @param intervento 
     * @param id_settore L&#39;id del settore dell&#39;utente.
     * @param offset Il numero di record da ignorare prima di iniziare a raccogliere i risultati.
     * @param limit Il numero di record da restituire.
     * @param sort Il campo di sort.
     * @param direction La direzione di sort.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRicercaInterventi(intervento: Intervento, id_settore: string, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', observe?: 'body', reportProgress?: boolean): Observable<PagedResponseIntervento>;
    public getRicercaInterventi(intervento: Intervento, id_settore: string, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResponseIntervento>>;
    public getRicercaInterventi(intervento: Intervento, id_settore: string, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResponseIntervento>>;
    public getRicercaInterventi(intervento: Intervento, id_settore: string, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (intervento === null || intervento === undefined) {
            throw new Error('Required parameter intervento was null or undefined when calling getRicercaInterventi.');
        }
        if (id_settore === null || id_settore === undefined) {
            throw new Error('Required parameter id_settore was null or undefined when calling getRicercaInterventi.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (direction !== undefined && direction !== null) {
            queryParameters = queryParameters.set('direction', <any>direction);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PagedResponseIntervento>(`${this.basePath}/pba/intervento/ricerca/settore/${encodeURIComponent(String(id_settore))}`,
            intervento,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce gli interventi registrati su sistema.
     * @param id_programma_old id programma partenza.
     * @param id_programma_new id programma destinazione.
     * @param offset Il numero di record da ignorare prima di iniziare a raccogliere i risultati.
     * @param limit Il numero di record da restituire.
     * @param sort Il campo di sort.
     * @param direction La direzione di sort.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRicercaInterventiXCopia(id_programma_old: string, id_programma_new: string, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', observe?: 'body', reportProgress?: boolean): Observable<PagedResponseIntervento>;
    public getRicercaInterventiXCopia(id_programma_old: string, id_programma_new: string, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResponseIntervento>>;
    public getRicercaInterventiXCopia(id_programma_old: string, id_programma_new: string, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResponseIntervento>>;
    public getRicercaInterventiXCopia(id_programma_old: string, id_programma_new: string, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_programma_old === null || id_programma_old === undefined) {
            throw new Error('Required parameter id_programma_old was null or undefined when calling getRicercaInterventiXCopia.');
        }
        if (id_programma_new === null || id_programma_new === undefined) {
            throw new Error('Required parameter id_programma_new was null or undefined when calling getRicercaInterventiXCopia.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (direction !== undefined && direction !== null) {
            queryParameters = queryParameters.set('direction', <any>direction);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PagedResponseIntervento>(`${this.basePath}/pba/intervento/ricerca-per-copia/programma-old-id/${encodeURIComponent(String(id_programma_old))}/programma-new-id/${encodeURIComponent(String(id_programma_new))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce una lista di rup storicizzati legati all intervento.
     * @param id L&#39;id dell intervento.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getStoricoRupsByInterventoId(id: string, observe?: 'body', reportProgress?: boolean): Observable<Array<StoricoInterventoRup>>;
    public getStoricoRupsByInterventoId(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<StoricoInterventoRup>>>;
    public getStoricoRupsByInterventoId(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<StoricoInterventoRup>>>;
    public getStoricoRupsByInterventoId(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getStoricoRupsByInterventoId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<StoricoInterventoRup>>(`${this.basePath}/pba/intervento/storico/rups/intervento/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce l&#39;ultimo stato storicizzato legato all intervento.
     * @param id L&#39;id dell intervento.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUltimoStatoInfoByInterventoId(id: string, observe?: 'body', reportProgress?: boolean): Observable<Array<StatoInterventoInfo>>;
    public getUltimoStatoInfoByInterventoId(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<StatoInterventoInfo>>>;
    public getUltimoStatoInfoByInterventoId(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<StatoInterventoInfo>>>;
    public getUltimoStatoInfoByInterventoId(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getUltimoStatoInfoByInterventoId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<StatoInterventoInfo>>(`${this.basePath}/pba/intervento/ultimo-stato-info/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * inserisce interventi copia
     * @param interventiDaCopia 
     * @param id_programma L&#39;id del programma.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postInterventiDaCopia(interventiDaCopia: InterventiDaCopia, id_programma: string, observe?: 'body', reportProgress?: boolean): Observable<Intervento>;
    public postInterventiDaCopia(interventiDaCopia: InterventiDaCopia, id_programma: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Intervento>>;
    public postInterventiDaCopia(interventiDaCopia: InterventiDaCopia, id_programma: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Intervento>>;
    public postInterventiDaCopia(interventiDaCopia: InterventiDaCopia, id_programma: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (interventiDaCopia === null || interventiDaCopia === undefined) {
            throw new Error('Required parameter interventiDaCopia was null or undefined when calling postInterventiDaCopia.');
        }
        if (id_programma === null || id_programma === undefined) {
            throw new Error('Required parameter id_programma was null or undefined when calling postInterventiDaCopia.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Intervento>(`${this.basePath}/pba/intervento/copia-lista-int/programma/${encodeURIComponent(String(id_programma))}`,
            interventiDaCopia,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Inserisce un intervento su sistema.
     * @param intervento 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postIntervento(intervento: Intervento, observe?: 'body', reportProgress?: boolean): Observable<Intervento>;
    public postIntervento(intervento: Intervento, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Intervento>>;
    public postIntervento(intervento: Intervento, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Intervento>>;
    public postIntervento(intervento: Intervento, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (intervento === null || intervento === undefined) {
            throw new Error('Required parameter intervento was null or undefined when calling postIntervento.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Intervento>(`${this.basePath}/pba/intervento`,
            intervento,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * inserisce interventi da file
     * @param idEnte 
     * @param annoProgramma 
     * @param versioneProgramma 
     * @param utenteReferenteCf 
     * @param attachment 
     * @param attachment2 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postUploadCsv(idEnte?: string, annoProgramma?: string, versioneProgramma?: string, utenteReferenteCf?: string, attachment?: Blob, attachment2?: Blob, observe?: 'body', reportProgress?: boolean): Observable<WebInterventoFileHolder>;
    public postUploadCsv(idEnte?: string, annoProgramma?: string, versioneProgramma?: string, utenteReferenteCf?: string, attachment?: Blob, attachment2?: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WebInterventoFileHolder>>;
    public postUploadCsv(idEnte?: string, annoProgramma?: string, versioneProgramma?: string, utenteReferenteCf?: string, attachment?: Blob, attachment2?: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WebInterventoFileHolder>>;
    public postUploadCsv(idEnte?: string, annoProgramma?: string, versioneProgramma?: string, utenteReferenteCf?: string, attachment?: Blob, attachment2?: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: FormParams;
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (idEnte !== undefined) {
            formParams = formParams.append('idEnte', <any>idEnte) || formParams;
        }
        if (annoProgramma !== undefined) {
            formParams = formParams.append('annoProgramma', <any>annoProgramma) || formParams;
        }
        if (versioneProgramma !== undefined) {
            formParams = formParams.append('versioneProgramma', <any>versioneProgramma) || formParams;
        }
        if (utenteReferenteCf !== undefined) {
            formParams = formParams.append('utenteReferenteCf', <any>utenteReferenteCf) || formParams;
        }
        if (attachment !== undefined) {
            formParams = formParams.append('attachment', <any>attachment) || formParams;
        }
        if (attachment2 !== undefined) {
            formParams = formParams.append('attachment2', <any>attachment2) || formParams;
        }

        return this.httpClient.post<WebInterventoFileHolder>(`${this.basePath}/pba/intervento/upload/csv`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Aggiorna gli stati x lista interventi.
     * @param id_settore L&#39;id del settore dell&#39;utente.
     * @param interventi 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putInterventiStatoAnnullato(id_settore: string, interventi: Array<Intervento>, observe?: 'body', reportProgress?: boolean): Observable<Intervento>;
    public putInterventiStatoAnnullato(id_settore: string, interventi: Array<Intervento>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Intervento>>;
    public putInterventiStatoAnnullato(id_settore: string, interventi: Array<Intervento>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Intervento>>;
    public putInterventiStatoAnnullato(id_settore: string, interventi: Array<Intervento>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_settore === null || id_settore === undefined) {
            throw new Error('Required parameter id_settore was null or undefined when calling putInterventiStatoAnnullato.');
        }
        if (interventi === null || interventi === undefined) {
            throw new Error('Required parameter interventi was null or undefined when calling putInterventiStatoAnnullato.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Intervento>(`${this.basePath}/pba/intervento/stato/annullato/settore/${encodeURIComponent(String(id_settore))}`,
            interventi,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Aggiorna gli stati x lista interventi.
     * @param interventi 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putInterventiStatoApprovato(interventi: Array<Intervento>, observe?: 'body', reportProgress?: boolean): Observable<Intervento>;
    public putInterventiStatoApprovato(interventi: Array<Intervento>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Intervento>>;
    public putInterventiStatoApprovato(interventi: Array<Intervento>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Intervento>>;
    public putInterventiStatoApprovato(interventi: Array<Intervento>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (interventi === null || interventi === undefined) {
            throw new Error('Required parameter interventi was null or undefined when calling putInterventiStatoApprovato.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Intervento>(`${this.basePath}/pba/intervento/stato/approvato`,
            interventi,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Riporta l&#39;acquisto in stato BOZZA, aggiornando i dati del rifiuto.
     * @param interventi 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putInterventiStatoBozzaDaRifiuto(interventi: Array<Intervento>, observe?: 'body', reportProgress?: boolean): Observable<Intervento>;
    public putInterventiStatoBozzaDaRifiuto(interventi: Array<Intervento>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Intervento>>;
    public putInterventiStatoBozzaDaRifiuto(interventi: Array<Intervento>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Intervento>>;
    public putInterventiStatoBozzaDaRifiuto(interventi: Array<Intervento>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (interventi === null || interventi === undefined) {
            throw new Error('Required parameter interventi was null or undefined when calling putInterventiStatoBozzaDaRifiuto.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Intervento>(`${this.basePath}/pba/intervento/stato/bozza-da-rifiuto`,
            interventi,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Aggiorna gli stati x lista interventi.
     * @param interventi 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putInterventiStatoVisto(interventi: Array<Intervento>, observe?: 'body', reportProgress?: boolean): Observable<Intervento>;
    public putInterventiStatoVisto(interventi: Array<Intervento>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Intervento>>;
    public putInterventiStatoVisto(interventi: Array<Intervento>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Intervento>>;
    public putInterventiStatoVisto(interventi: Array<Intervento>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (interventi === null || interventi === undefined) {
            throw new Error('Required parameter interventi was null or undefined when calling putInterventiStatoVisto.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Intervento>(`${this.basePath}/pba/intervento/stato/visto`,
            interventi,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Cambia lo stato in Validato valorizzando anche i campi relativi al Visto.
     * @param interventi 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putInterventiStatoVistoEValidato(interventi: Array<Intervento>, observe?: 'body', reportProgress?: boolean): Observable<Intervento>;
    public putInterventiStatoVistoEValidato(interventi: Array<Intervento>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Intervento>>;
    public putInterventiStatoVistoEValidato(interventi: Array<Intervento>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Intervento>>;
    public putInterventiStatoVistoEValidato(interventi: Array<Intervento>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (interventi === null || interventi === undefined) {
            throw new Error('Required parameter interventi was null or undefined when calling putInterventiStatoVistoEValidato.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Intervento>(`${this.basePath}/pba/intervento/stato/visto-e-validato`,
            interventi,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Aggiorna l&#39;intervento per id.
     * @param id L&#39;id dell&#39;intervento.
     * @param intervento 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putInterventoById(id: string, intervento: Intervento, observe?: 'body', reportProgress?: boolean): Observable<Intervento>;
    public putInterventoById(id: string, intervento: Intervento, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Intervento>>;
    public putInterventoById(id: string, intervento: Intervento, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Intervento>>;
    public putInterventoById(id: string, intervento: Intervento, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putInterventoById.');
        }
        if (intervento === null || intervento === undefined) {
            throw new Error('Required parameter intervento was null or undefined when calling putInterventoById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Intervento>(`${this.basePath}/pba/intervento/${encodeURIComponent(String(id))}`,
            intervento,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * archivia e salva l&#39;utente loggato come nuovo rup.
     * @param interventi 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putInterventoPrendiInCarico(interventi: Array<Intervento>, observe?: 'body', reportProgress?: boolean): Observable<Intervento>;
    public putInterventoPrendiInCarico(interventi: Array<Intervento>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Intervento>>;
    public putInterventoPrendiInCarico(interventi: Array<Intervento>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Intervento>>;
    public putInterventoPrendiInCarico(interventi: Array<Intervento>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (interventi === null || interventi === undefined) {
            throw new Error('Required parameter interventi was null or undefined when calling putInterventoPrendiInCarico.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Intervento>(`${this.basePath}/pba/intervento/prendi-in-carico`,
            interventi,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Aggiorna lo stato intervento per id.
     * @param id L&#39;id dell&#39;intervento di cui cambio lo stato.
     * @param id_settore L&#39;id del settore dell&#39;utente.
     * @param intervento 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putInterventoStatoAnnullatoById(id: string, id_settore: string, intervento: Intervento, observe?: 'body', reportProgress?: boolean): Observable<Intervento>;
    public putInterventoStatoAnnullatoById(id: string, id_settore: string, intervento: Intervento, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Intervento>>;
    public putInterventoStatoAnnullatoById(id: string, id_settore: string, intervento: Intervento, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Intervento>>;
    public putInterventoStatoAnnullatoById(id: string, id_settore: string, intervento: Intervento, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putInterventoStatoAnnullatoById.');
        }
        if (id_settore === null || id_settore === undefined) {
            throw new Error('Required parameter id_settore was null or undefined when calling putInterventoStatoAnnullatoById.');
        }
        if (intervento === null || intervento === undefined) {
            throw new Error('Required parameter intervento was null or undefined when calling putInterventoStatoAnnullatoById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Intervento>(`${this.basePath}/pba/intervento/stato/annullato/${encodeURIComponent(String(id))}/settore/${encodeURIComponent(String(id_settore))}`,
            intervento,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Aggiorna lo stato intervento per id.
     * @param id L&#39;id dell&#39;intervento di cui cambio lo stato.
     * @param intervento 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putInterventoStatoApprovatoById(id: string, intervento: Intervento, observe?: 'body', reportProgress?: boolean): Observable<Intervento>;
    public putInterventoStatoApprovatoById(id: string, intervento: Intervento, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Intervento>>;
    public putInterventoStatoApprovatoById(id: string, intervento: Intervento, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Intervento>>;
    public putInterventoStatoApprovatoById(id: string, intervento: Intervento, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putInterventoStatoApprovatoById.');
        }
        if (intervento === null || intervento === undefined) {
            throw new Error('Required parameter intervento was null or undefined when calling putInterventoStatoApprovatoById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Intervento>(`${this.basePath}/pba/intervento/stato/approvato/${encodeURIComponent(String(id))}`,
            intervento,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * archivia e salva il nuovo rup.
     * @param id_rup L&#39;id del rup utente.
     * @param interventi 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putInterventoVoltura(id_rup: string, interventi: Array<Intervento>, observe?: 'body', reportProgress?: boolean): Observable<Intervento>;
    public putInterventoVoltura(id_rup: string, interventi: Array<Intervento>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Intervento>>;
    public putInterventoVoltura(id_rup: string, interventi: Array<Intervento>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Intervento>>;
    public putInterventoVoltura(id_rup: string, interventi: Array<Intervento>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_rup === null || id_rup === undefined) {
            throw new Error('Required parameter id_rup was null or undefined when calling putInterventoVoltura.');
        }
        if (interventi === null || interventi === undefined) {
            throw new Error('Required parameter interventi was null or undefined when calling putInterventoVoltura.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Intervento>(`${this.basePath}/pba/intervento/voltura/${encodeURIComponent(String(id_rup))}`,
            interventi,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce la stampa dell&#39;allegato degli interventi per dato programma.
     * @param id_programma L&#39;uuid del programma.
     * @param formatFile Il formato del file.
     * @param intervento 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public stampaAllegatoIntervento(id_programma: string, formatFile: 'xlsx' | 'pdf', intervento: Intervento, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public stampaAllegatoIntervento(id_programma: string, formatFile: 'xlsx' | 'pdf', intervento: Intervento, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public stampaAllegatoIntervento(id_programma: string, formatFile: 'xlsx' | 'pdf', intervento: Intervento, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public stampaAllegatoIntervento(id_programma: string, formatFile: 'xlsx' | 'pdf', intervento: Intervento, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_programma === null || id_programma === undefined) {
            throw new Error('Required parameter id_programma was null or undefined when calling stampaAllegatoIntervento.');
        }
        if (formatFile === null || formatFile === undefined) {
            throw new Error('Required parameter formatFile was null or undefined when calling stampaAllegatoIntervento.');
        }
        if (intervento === null || intervento === undefined) {
            throw new Error('Required parameter intervento was null or undefined when calling stampaAllegatoIntervento.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            'application/pdf'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.get(`${this.basePath}/pba/intervento/stampa/allegato-scheda-b/${encodeURIComponent(String(id_programma))}/${encodeURIComponent(String(formatFile))}`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
