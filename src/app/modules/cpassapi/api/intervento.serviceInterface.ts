/*
* SPDX-FileCopyrightText: Copyright 2019 - 2020 | CSI Piemonte
* SPDX-License-Identifier: EUPL-1.2
*/
/**
 * Contabilità passiva
 * API per il backend della suite di contabilità passiva.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { ApiError } from '../model/apiError';
import { Cpv } from '../model/cpv';
import { InterventiDaCopia } from '../model/interventiDaCopia';
import { Intervento } from '../model/intervento';
import { InterventoImporti } from '../model/interventoImporti';
import { PagedResponseIntervento } from '../model/pagedResponseIntervento';
import { StatoInterventoInfo } from '../model/statoInterventoInfo';
import { StoricoInterventoRup } from '../model/storicoInterventoRup';
import { WebInterventoFileHolder } from '../model/webInterventoFileHolder';


import { Configuration }                                     from '../configuration';


export interface InterventoServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    

    /**
    * 
    * Cancella l&#39;intervento per id.
    * @param id L&#39;id dell&#39;intervento.
    */
    deleteInterventoById(id: string, extraHttpRequestParams?: any): Observable<string>;

    /**
    * 
    * Restituisce una lista di cpv legati all intervento.
    * @param id L&#39;id dell intervento.
    */
    getCpvsByInterventoId(id: string, extraHttpRequestParams?: any): Observable<Array<Cpv>>;

    /**
    * 
    * Restituisce l&#39;intervento per cui.
    * @param cui Il cui dell&#39;intervento.
    * @param id_programma L&#39;uuid del programma.
    * @param id_settore L&#39;id del settore dell&#39;utente.
    */
    getInterventoByCui(cui: string, id_programma: string, id_settore: string, extraHttpRequestParams?: any): Observable<Intervento>;

    /**
    * 
    * Restituisce l&#39;intervento per id.
    * @param id L&#39;id dell&#39;intervento.
    */
    getInterventoById(id: string, extraHttpRequestParams?: any): Observable<Intervento>;

    /**
    * 
    * Restituisce gli importi per id intervento.
    * @param id L&#39;id dell&#39;intervento.
    * @param offset Il numero di record da ignorare prima di iniziare a raccogliere i risultati.
    * @param limit Il numero di record da restituire.
    */
    getInterventoImportiByIntervento(id: string, offset?: number, limit?: number, extraHttpRequestParams?: any): Observable<Array<InterventoImporti>>;

    /**
    * 
    * Restituisce gli interventi registrati su sistema.
    * @param intervento 
    * @param id_settore L&#39;id del settore dell&#39;utente.
    * @param offset Il numero di record da ignorare prima di iniziare a raccogliere i risultati.
    * @param limit Il numero di record da restituire.
    * @param sort Il campo di sort.
    * @param direction La direzione di sort.
    */
    getRicercaInterventi(intervento: Intervento, id_settore: string, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', extraHttpRequestParams?: any): Observable<PagedResponseIntervento>;

    /**
    * 
    * Restituisce gli interventi registrati su sistema.
    * @param id_programma_old id programma partenza.
    * @param id_programma_new id programma destinazione.
    * @param offset Il numero di record da ignorare prima di iniziare a raccogliere i risultati.
    * @param limit Il numero di record da restituire.
    * @param sort Il campo di sort.
    * @param direction La direzione di sort.
    */
    getRicercaInterventiXCopia(id_programma_old: string, id_programma_new: string, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', extraHttpRequestParams?: any): Observable<PagedResponseIntervento>;

    /**
    * 
    * Restituisce una lista di rup storicizzati legati all intervento.
    * @param id L&#39;id dell intervento.
    */
    getStoricoRupsByInterventoId(id: string, extraHttpRequestParams?: any): Observable<Array<StoricoInterventoRup>>;

    /**
    * 
    * Restituisce l&#39;ultimo stato storicizzato legato all intervento.
    * @param id L&#39;id dell intervento.
    */
    getUltimoStatoInfoByInterventoId(id: string, extraHttpRequestParams?: any): Observable<Array<StatoInterventoInfo>>;

    /**
    * 
    * inserisce interventi copia
    * @param interventiDaCopia 
    * @param id_programma L&#39;id del programma.
    */
    postInterventiDaCopia(interventiDaCopia: InterventiDaCopia, id_programma: string, extraHttpRequestParams?: any): Observable<Intervento>;

    /**
    * 
    * Inserisce un intervento su sistema.
    * @param intervento 
    */
    postIntervento(intervento: Intervento, extraHttpRequestParams?: any): Observable<Intervento>;

    /**
    * 
    * inserisce interventi da file
    * @param idEnte 
    * @param annoProgramma 
    * @param versioneProgramma 
    * @param utenteReferenteCf 
    * @param attachment 
    * @param attachment2 
    */
    postUploadCsv(idEnte?: string, annoProgramma?: string, versioneProgramma?: string, utenteReferenteCf?: string, attachment?: Blob, attachment2?: Blob, extraHttpRequestParams?: any): Observable<WebInterventoFileHolder>;

    /**
    * 
    * Aggiorna gli stati x lista interventi.
    * @param id_settore L&#39;id del settore dell&#39;utente.
    * @param interventi 
    */
    putInterventiStatoAnnullato(id_settore: string, interventi: Array<Intervento>, extraHttpRequestParams?: any): Observable<Intervento>;

    /**
    * 
    * Aggiorna gli stati x lista interventi.
    * @param interventi 
    */
    putInterventiStatoApprovato(interventi: Array<Intervento>, extraHttpRequestParams?: any): Observable<Intervento>;

    /**
    * 
    * Riporta l&#39;acquisto in stato BOZZA, aggiornando i dati del rifiuto.
    * @param interventi 
    */
    putInterventiStatoBozzaDaRifiuto(interventi: Array<Intervento>, extraHttpRequestParams?: any): Observable<Intervento>;

    /**
    * 
    * Aggiorna gli stati x lista interventi.
    * @param interventi 
    */
    putInterventiStatoVisto(interventi: Array<Intervento>, extraHttpRequestParams?: any): Observable<Intervento>;

    /**
    * 
    * Cambia lo stato in Validato valorizzando anche i campi relativi al Visto.
    * @param interventi 
    */
    putInterventiStatoVistoEValidato(interventi: Array<Intervento>, extraHttpRequestParams?: any): Observable<Intervento>;

    /**
    * 
    * Aggiorna l&#39;intervento per id.
    * @param id L&#39;id dell&#39;intervento.
    * @param intervento 
    */
    putInterventoById(id: string, intervento: Intervento, extraHttpRequestParams?: any): Observable<Intervento>;

    /**
    * 
    * archivia e salva l&#39;utente loggato come nuovo rup.
    * @param interventi 
    */
    putInterventoPrendiInCarico(interventi: Array<Intervento>, extraHttpRequestParams?: any): Observable<Intervento>;

    /**
    * 
    * Aggiorna lo stato intervento per id.
    * @param id L&#39;id dell&#39;intervento di cui cambio lo stato.
    * @param id_settore L&#39;id del settore dell&#39;utente.
    * @param intervento 
    */
    putInterventoStatoAnnullatoById(id: string, id_settore: string, intervento: Intervento, extraHttpRequestParams?: any): Observable<Intervento>;

    /**
    * 
    * Aggiorna lo stato intervento per id.
    * @param id L&#39;id dell&#39;intervento di cui cambio lo stato.
    * @param intervento 
    */
    putInterventoStatoApprovatoById(id: string, intervento: Intervento, extraHttpRequestParams?: any): Observable<Intervento>;

    /**
    * 
    * archivia e salva il nuovo rup.
    * @param id_rup L&#39;id del rup utente.
    * @param interventi 
    */
    putInterventoVoltura(id_rup: string, interventi: Array<Intervento>, extraHttpRequestParams?: any): Observable<Intervento>;

    /**
    * 
    * Restituisce la stampa dell&#39;allegato degli interventi per dato programma.
    * @param id_programma L&#39;uuid del programma.
    * @param formatFile Il formato del file.
    * @param intervento 
    */
    stampaAllegatoIntervento(id_programma: string, formatFile: 'xlsx' | 'pdf', intervento: Intervento, extraHttpRequestParams?: any): Observable<Blob>;

}
