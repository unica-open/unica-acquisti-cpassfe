/*
* SPDX-FileCopyrightText: Copyright 2019 - 2020 | CSI Piemonte
* SPDX-License-Identifier: EUPL-1.2
*/
/**
 * Contabilità passiva
 * API per il backend della suite di contabilità passiva.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ApiError } from '../model/apiError';
import { Ente } from '../model/ente';
import { Programma } from '../model/programma';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration, FormParams }                         from '../configuration';
import { ProgrammaServiceInterface }                            from './programma.serviceInterface';


@Injectable()
export class ProgrammaService implements ProgrammaServiceInterface {

    protected basePath = 'http://localhost:8080/cpassbe/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Cancella l&#39;programma per id.
     * @param id L&#39;id dell&#39;programma.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteProgrammaById(id: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public deleteProgrammaById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public deleteProgrammaById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public deleteProgrammaById(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteProgrammaById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<string>(`${this.basePath}/pba/programma/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce l&#39;ente per id.
     * @param id L&#39;id dell&#39;ente.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEnteById(id: string, observe?: 'body', reportProgress?: boolean): Observable<Ente>;
    public getEnteById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Ente>>;
    public getEnteById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Ente>>;
    public getEnteById(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getEnteById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Ente>(`${this.basePath}/ente/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce il programma per id.
     * @param id L&#39;id dell&#39;programma.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProgrammaById(id: string, observe?: 'body', reportProgress?: boolean): Observable<Programma>;
    public getProgrammaById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Programma>>;
    public getProgrammaById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Programma>>;
    public getProgrammaById(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getProgrammaById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Programma>(`${this.basePath}/pba/programma/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce i programmi di un determinato settore.
     * @param id_settore L&#39;id del settore dell&#39;utente.
     * @param validi L&#39;id del settore dell&#39;utente.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProgrammiBySettore(id_settore: string, validi: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<Programma>>;
    public getProgrammiBySettore(id_settore: string, validi: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Programma>>>;
    public getProgrammiBySettore(id_settore: string, validi: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Programma>>>;
    public getProgrammiBySettore(id_settore: string, validi: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_settore === null || id_settore === undefined) {
            throw new Error('Required parameter id_settore was null or undefined when calling getProgrammiBySettore.');
        }
        if (validi === null || validi === undefined) {
            throw new Error('Required parameter validi was null or undefined when calling getProgrammiBySettore.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Programma>>(`${this.basePath}/pba/programma/settore/${encodeURIComponent(String(id_settore))}/validi/${encodeURIComponent(String(validi))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce i programmi di un determinato settore.
     * @param id_settore L&#39;id del settore dell&#39;utente.
     * @param stato_code codice dello stato
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProgrammiBySettoreAndStato(id_settore: string, stato_code: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Programma>>;
    public getProgrammiBySettoreAndStato(id_settore: string, stato_code: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Programma>>>;
    public getProgrammiBySettoreAndStato(id_settore: string, stato_code: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Programma>>>;
    public getProgrammiBySettoreAndStato(id_settore: string, stato_code: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_settore === null || id_settore === undefined) {
            throw new Error('Required parameter id_settore was null or undefined when calling getProgrammiBySettoreAndStato.');
        }
        if (stato_code === null || stato_code === undefined) {
            throw new Error('Required parameter stato_code was null or undefined when calling getProgrammiBySettoreAndStato.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Programma>>(`${this.basePath}/pba/programma/settore/${encodeURIComponent(String(id_settore))}/stato/${encodeURIComponent(String(stato_code))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce il programma di un determinato settore per quell&#39;anno non annullato
     * @param id_settore L&#39;id del settore dell&#39;utente.
     * @param anno anno del programma.
     * @param versione versione del programma.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProgrammiBySettoreAnnoVersione(id_settore: string, anno: number, versione: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Programma>>;
    public getProgrammiBySettoreAnnoVersione(id_settore: string, anno: number, versione: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Programma>>>;
    public getProgrammiBySettoreAnnoVersione(id_settore: string, anno: number, versione: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Programma>>>;
    public getProgrammiBySettoreAnnoVersione(id_settore: string, anno: number, versione: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_settore === null || id_settore === undefined) {
            throw new Error('Required parameter id_settore was null or undefined when calling getProgrammiBySettoreAnnoVersione.');
        }
        if (anno === null || anno === undefined) {
            throw new Error('Required parameter anno was null or undefined when calling getProgrammiBySettoreAnnoVersione.');
        }
        if (versione === null || versione === undefined) {
            throw new Error('Required parameter versione was null or undefined when calling getProgrammiBySettoreAnnoVersione.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Programma>>(`${this.basePath}/pba/programma/settore/${encodeURIComponent(String(id_settore))}/anno/${encodeURIComponent(String(anno))}/versione/${encodeURIComponent(String(versione))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Gets the Programmi che si possono trasmettere al ministero
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProgrammiTrasmissioneMIT(observe?: 'body', reportProgress?: boolean): Observable<Array<Programma>>;
    public getProgrammiTrasmissioneMIT(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Programma>>>;
    public getProgrammiTrasmissioneMIT(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Programma>>>;
    public getProgrammiTrasmissioneMIT(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Programma>>(`${this.basePath}/pba/programma/trasmissione-mit`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce gli ultimi programmi di un determinato settore.
     * @param id_settore L&#39;id del settore dell&#39;utente.
     * @param stato_code codice dello stato
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUltimiProgrammiBySettoreAndStato(id_settore: string, stato_code: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Programma>>;
    public getUltimiProgrammiBySettoreAndStato(id_settore: string, stato_code: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Programma>>>;
    public getUltimiProgrammiBySettoreAndStato(id_settore: string, stato_code: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Programma>>>;
    public getUltimiProgrammiBySettoreAndStato(id_settore: string, stato_code: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_settore === null || id_settore === undefined) {
            throw new Error('Required parameter id_settore was null or undefined when calling getUltimiProgrammiBySettoreAndStato.');
        }
        if (stato_code === null || stato_code === undefined) {
            throw new Error('Required parameter stato_code was null or undefined when calling getUltimiProgrammiBySettoreAndStato.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Programma>>(`${this.basePath}/pba/programma/settore/${encodeURIComponent(String(id_settore))}/stato/${encodeURIComponent(String(stato_code))}/recenti`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Inserisce un programma su sistema.
     * @param programma 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postProgramma(programma: Programma, observe?: 'body', reportProgress?: boolean): Observable<Programma>;
    public postProgramma(programma: Programma, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Programma>>;
    public postProgramma(programma: Programma, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Programma>>;
    public postProgramma(programma: Programma, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (programma === null || programma === undefined) {
            throw new Error('Required parameter programma was null or undefined when calling postProgramma.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Programma>(`${this.basePath}/pba/programma`,
            programma,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Copia un programma su sistema.
     * @param soloControlli Se il servizio deve effettuare i soli controlli precedenti la copia.
     * @param programma 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postProgrammaCopia(soloControlli: boolean, programma: Programma, observe?: 'body', reportProgress?: boolean): Observable<Programma>;
    public postProgrammaCopia(soloControlli: boolean, programma: Programma, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Programma>>;
    public postProgrammaCopia(soloControlli: boolean, programma: Programma, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Programma>>;
    public postProgrammaCopia(soloControlli: boolean, programma: Programma, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (soloControlli === null || soloControlli === undefined) {
            throw new Error('Required parameter soloControlli was null or undefined when calling postProgrammaCopia.');
        }
        if (programma === null || programma === undefined) {
            throw new Error('Required parameter programma was null or undefined when calling postProgrammaCopia.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Programma>(`${this.basePath}/pba/programma/copia/${encodeURIComponent(String(soloControlli))}`,
            programma,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Aggiorna il programma per id.
     * @param id id del programma.
     * @param programma 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putProgrammaById(id: string, programma: Programma, observe?: 'body', reportProgress?: boolean): Observable<Programma>;
    public putProgrammaById(id: string, programma: Programma, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Programma>>;
    public putProgrammaById(id: string, programma: Programma, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Programma>>;
    public putProgrammaById(id: string, programma: Programma, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putProgrammaById.');
        }
        if (programma === null || programma === undefined) {
            throw new Error('Required parameter programma was null or undefined when calling putProgrammaById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Programma>(`${this.basePath}/pba/programma/${encodeURIComponent(String(id))}`,
            programma,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Aggiorna lo stato programma per id.
     * @param id L&#39;id dell&#39;programma di cui cambio lo stato.
     * @param programma 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putProgrammaStatoAnnullatoById(id: string, programma: Programma, observe?: 'body', reportProgress?: boolean): Observable<Programma>;
    public putProgrammaStatoAnnullatoById(id: string, programma: Programma, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Programma>>;
    public putProgrammaStatoAnnullatoById(id: string, programma: Programma, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Programma>>;
    public putProgrammaStatoAnnullatoById(id: string, programma: Programma, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putProgrammaStatoAnnullatoById.');
        }
        if (programma === null || programma === undefined) {
            throw new Error('Required parameter programma was null or undefined when calling putProgrammaStatoAnnullatoById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Programma>(`${this.basePath}/pba/programma/stato/annullato/${encodeURIComponent(String(id))}`,
            programma,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Aggiorna lo stato programma per id.
     * @param id L&#39;id dell&#39;programma di cui cambio lo stato.
     * @param ignoreWarning Per ignorare i warning in fase di controllo.
     * @param programma 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putProgrammaStatoConfermatoById(id: string, ignoreWarning: boolean, programma: Programma, observe?: 'body', reportProgress?: boolean): Observable<Programma>;
    public putProgrammaStatoConfermatoById(id: string, ignoreWarning: boolean, programma: Programma, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Programma>>;
    public putProgrammaStatoConfermatoById(id: string, ignoreWarning: boolean, programma: Programma, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Programma>>;
    public putProgrammaStatoConfermatoById(id: string, ignoreWarning: boolean, programma: Programma, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putProgrammaStatoConfermatoById.');
        }
        if (ignoreWarning === null || ignoreWarning === undefined) {
            throw new Error('Required parameter ignoreWarning was null or undefined when calling putProgrammaStatoConfermatoById.');
        }
        if (programma === null || programma === undefined) {
            throw new Error('Required parameter programma was null or undefined when calling putProgrammaStatoConfermatoById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Programma>(`${this.basePath}/pba/programma/stato/confermato/${encodeURIComponent(String(id))}/${encodeURIComponent(String(ignoreWarning))}`,
            programma,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Aggiorna lo stato programma per id.
     * @param id L&#39;id dell&#39;programma di cui cambio lo stato.
     * @param programma 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putProgrammaStatoRiportaInBozzaById(id: string, programma: Programma, observe?: 'body', reportProgress?: boolean): Observable<Programma>;
    public putProgrammaStatoRiportaInBozzaById(id: string, programma: Programma, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Programma>>;
    public putProgrammaStatoRiportaInBozzaById(id: string, programma: Programma, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Programma>>;
    public putProgrammaStatoRiportaInBozzaById(id: string, programma: Programma, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putProgrammaStatoRiportaInBozzaById.');
        }
        if (programma === null || programma === undefined) {
            throw new Error('Required parameter programma was null or undefined when calling putProgrammaStatoRiportaInBozzaById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Programma>(`${this.basePath}/pba/programma/stato/riporta-in-bozza/${encodeURIComponent(String(id))}`,
            programma,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Per trasmettere un programma al ministero
     * @param id_programma L&#39;id del programma.
     * @param id_utente L&#39;id dell&#39;utente.
     * @param modalita_invio Modalita invio al ministero.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putTrasmettiProgrammaById(id_programma: string, id_utente: string, modalita_invio: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public putTrasmettiProgrammaById(id_programma: string, id_utente: string, modalita_invio: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public putTrasmettiProgrammaById(id_programma: string, id_utente: string, modalita_invio: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public putTrasmettiProgrammaById(id_programma: string, id_utente: string, modalita_invio: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_programma === null || id_programma === undefined) {
            throw new Error('Required parameter id_programma was null or undefined when calling putTrasmettiProgrammaById.');
        }
        if (id_utente === null || id_utente === undefined) {
            throw new Error('Required parameter id_utente was null or undefined when calling putTrasmettiProgrammaById.');
        }
        if (modalita_invio === null || modalita_invio === undefined) {
            throw new Error('Required parameter modalita_invio was null or undefined when calling putTrasmettiProgrammaById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<any>(`${this.basePath}/pba/programma/trasmetti/${encodeURIComponent(String(id_programma))}/${encodeURIComponent(String(id_utente))}/${encodeURIComponent(String(modalita_invio))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
