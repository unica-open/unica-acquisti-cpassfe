/*
* SPDX-FileCopyrightText: Copyright 2019 - 2020 | CSI Piemonte
* SPDX-License-Identifier: EUPL-1.2
*/
/**
 * Contabilità passiva
 * API per il backend della suite di contabilità passiva.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AcquistoVariato } from '../model/acquistoVariato';
import { AliquoteIva } from '../model/aliquoteIva';
import { ApiError } from '../model/apiError';
import { Ausa } from '../model/ausa';
import { CausaleSospensioneEvasione } from '../model/causaleSospensioneEvasione';
import { Cpv } from '../model/cpv';
import { ModalitaAffidamento } from '../model/modalitaAffidamento';
import { Nuts } from '../model/nuts';
import { Ods } from '../model/ods';
import { PagedResponseOds } from '../model/pagedResponseOds';
import { Priorita } from '../model/priorita';
import { RicompresoTipo } from '../model/ricompresoTipo';
import { Risorsa } from '../model/risorsa';
import { SettoreInterventi } from '../model/settoreInterventi';
import { Stato } from '../model/stato';
import { StatoElOrdine } from '../model/statoElOrdine';
import { StatoNso } from '../model/statoNso';
import { TipoAcquisto } from '../model/tipoAcquisto';
import { TipoEvasione } from '../model/tipoEvasione';
import { TipoOrdine } from '../model/tipoOrdine';
import { TipoProcedura } from '../model/tipoProcedura';
import { UnitaMisura } from '../model/unitaMisura';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration, FormParams }                         from '../configuration';
import { DecodificaServiceInterface }                            from './decodifica.serviceInterface';


@Injectable()
export class DecodificaService implements DecodificaServiceInterface {

    protected basePath = 'http://localhost:8080/cpassbe/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Restituisce gli Acquisti Variati registrati su sistema.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAcquistiVariati(observe?: 'body', reportProgress?: boolean): Observable<Array<AcquistoVariato>>;
    public getAcquistiVariati(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<AcquistoVariato>>>;
    public getAcquistiVariati(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<AcquistoVariato>>>;
    public getAcquistiVariati(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<AcquistoVariato>>(`${this.basePath}/decodifica/acquisto-variato`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce le aliquote Iva registrate su sistema.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAliquoteIva(observe?: 'body', reportProgress?: boolean): Observable<Array<AliquoteIva>>;
    public getAliquoteIva(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<AliquoteIva>>>;
    public getAliquoteIva(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<AliquoteIva>>>;
    public getAliquoteIva(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<AliquoteIva>>(`${this.basePath}/decodifica/aliquote-iva`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce le Causali Sospensione Evasione registrate su sistema.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllCausaleSospensioneEvasioneValide(observe?: 'body', reportProgress?: boolean): Observable<Array<CausaleSospensioneEvasione>>;
    public getAllCausaleSospensioneEvasioneValide(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CausaleSospensioneEvasione>>>;
    public getAllCausaleSospensioneEvasioneValide(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CausaleSospensioneEvasione>>>;
    public getAllCausaleSospensioneEvasioneValide(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<CausaleSospensioneEvasione>>(`${this.basePath}/decodifica/causale-sospensione-evasione-valide`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce le AUSA registrate su sistema.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAusas(observe?: 'body', reportProgress?: boolean): Observable<Array<Ausa>>;
    public getAusas(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Ausa>>>;
    public getAusas(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Ausa>>>;
    public getAusas(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Ausa>>(`${this.basePath}/decodifica/ausa`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce i CPV registrati su sistema.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCpv(observe?: 'body', reportProgress?: boolean): Observable<Array<Cpv>>;
    public getCpv(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cpv>>>;
    public getCpv(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cpv>>>;
    public getCpv(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Cpv>>(`${this.basePath}/decodifica/cpv`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce i CPV legati a ODS registrati su sistema.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCpvOdsTree(observe?: 'body', reportProgress?: boolean): Observable<Array<Cpv>>;
    public getCpvOdsTree(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cpv>>>;
    public getCpvOdsTree(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cpv>>>;
    public getCpvOdsTree(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Cpv>>(`${this.basePath}/decodifica/cpv-ods-tree`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce i CPV registrati su sistema.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCpvTree(observe?: 'body', reportProgress?: boolean): Observable<Array<Cpv>>;
    public getCpvTree(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cpv>>>;
    public getCpvTree(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cpv>>>;
    public getCpvTree(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Cpv>>(`${this.basePath}/decodifica/cpv-tree`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce le modalità di affidamento registrate su sistema.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getModalitaAffidamento(observe?: 'body', reportProgress?: boolean): Observable<Array<ModalitaAffidamento>>;
    public getModalitaAffidamento(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ModalitaAffidamento>>>;
    public getModalitaAffidamento(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ModalitaAffidamento>>>;
    public getModalitaAffidamento(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ModalitaAffidamento>>(`${this.basePath}/decodifica/modalita-affidamento`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce i NUTS registrati su sistema.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getNuts(observe?: 'body', reportProgress?: boolean): Observable<Array<Nuts>>;
    public getNuts(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Nuts>>>;
    public getNuts(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Nuts>>>;
    public getNuts(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Nuts>>(`${this.basePath}/decodifica/nuts`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce le priorità registrate su sistema.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPriorita(observe?: 'body', reportProgress?: boolean): Observable<Array<Priorita>>;
    public getPriorita(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Priorita>>>;
    public getPriorita(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Priorita>>>;
    public getPriorita(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Priorita>>(`${this.basePath}/decodifica/priorita`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce gli oggetti di spesa presenti a sistema.
     * @param oggettiSpesa 
     * @param offset Il numero di record da ignorare prima di iniziare a raccogliere i risultati.
     * @param limit Il numero di record da restituire.
     * @param sort Il campo di sort.
     * @param direction La direzione di sort.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRicercaOggettiSpesa(oggettiSpesa: Ods, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', observe?: 'body', reportProgress?: boolean): Observable<PagedResponseOds>;
    public getRicercaOggettiSpesa(oggettiSpesa: Ods, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PagedResponseOds>>;
    public getRicercaOggettiSpesa(oggettiSpesa: Ods, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PagedResponseOds>>;
    public getRicercaOggettiSpesa(oggettiSpesa: Ods, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (oggettiSpesa === null || oggettiSpesa === undefined) {
            throw new Error('Required parameter oggettiSpesa was null or undefined when calling getRicercaOggettiSpesa.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (direction !== undefined && direction !== null) {
            queryParameters = queryParameters.set('direction', <any>direction);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PagedResponseOds>(`${this.basePath}/decodifica/ricerca/oggetti-spesa`,
            oggettiSpesa,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce i tipi di ricompreso registrati su sistema.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRicompresoTipos(observe?: 'body', reportProgress?: boolean): Observable<Array<RicompresoTipo>>;
    public getRicompresoTipos(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<RicompresoTipo>>>;
    public getRicompresoTipos(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<RicompresoTipo>>>;
    public getRicompresoTipos(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<RicompresoTipo>>(`${this.basePath}/decodifica/ricompreso-tipo`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce le risorse registrate su sistema.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRisorse(observe?: 'body', reportProgress?: boolean): Observable<Array<Risorsa>>;
    public getRisorse(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Risorsa>>>;
    public getRisorse(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Risorsa>>>;
    public getRisorse(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Risorsa>>(`${this.basePath}/decodifica/risorsa`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce i settori interventi registrati su sistema.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSettoreInterventi(observe?: 'body', reportProgress?: boolean): Observable<Array<SettoreInterventi>>;
    public getSettoreInterventi(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SettoreInterventi>>>;
    public getSettoreInterventi(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SettoreInterventi>>>;
    public getSettoreInterventi(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<SettoreInterventi>>(`${this.basePath}/decodifica/settore-interventi`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce gli Stato registrati su sistema.
     * @param tipo codice tipo.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getStatoByTipo(tipo: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Stato>>;
    public getStatoByTipo(tipo: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Stato>>>;
    public getStatoByTipo(tipo: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Stato>>>;
    public getStatoByTipo(tipo: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (tipo === null || tipo === undefined) {
            throw new Error('Required parameter tipo was null or undefined when calling getStatoByTipo.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Stato>>(`${this.basePath}/decodifica/stato/${encodeURIComponent(String(tipo))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce gli StatoElOrdine registrati su sistema.
     * @param tipo codice tipo.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getStatoElOrdineByTipo(tipo: string, observe?: 'body', reportProgress?: boolean): Observable<Array<StatoElOrdine>>;
    public getStatoElOrdineByTipo(tipo: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<StatoElOrdine>>>;
    public getStatoElOrdineByTipo(tipo: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<StatoElOrdine>>>;
    public getStatoElOrdineByTipo(tipo: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (tipo === null || tipo === undefined) {
            throw new Error('Required parameter tipo was null or undefined when calling getStatoElOrdineByTipo.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<StatoElOrdine>>(`${this.basePath}/decodifica/stato-el-ordine/${encodeURIComponent(String(tipo))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce gli StatoNso registrati su sistema.
     * @param tipo codice tipo nso.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getStatoNsoByTipo(tipo: string, observe?: 'body', reportProgress?: boolean): Observable<Array<StatoNso>>;
    public getStatoNsoByTipo(tipo: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<StatoNso>>>;
    public getStatoNsoByTipo(tipo: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<StatoNso>>>;
    public getStatoNsoByTipo(tipo: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (tipo === null || tipo === undefined) {
            throw new Error('Required parameter tipo was null or undefined when calling getStatoNsoByTipo.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<StatoNso>>(`${this.basePath}/decodifica/stato-nso/${encodeURIComponent(String(tipo))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce i TipoAcquisto validi registrati su sistema.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTipoAcquistos(observe?: 'body', reportProgress?: boolean): Observable<Array<TipoAcquisto>>;
    public getTipoAcquistos(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TipoAcquisto>>>;
    public getTipoAcquistos(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TipoAcquisto>>>;
    public getTipoAcquistos(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TipoAcquisto>>(`${this.basePath}/decodifica/tipo-acquisto`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce i TipoEvasione validi registrati su sistema.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTipoEvasione(observe?: 'body', reportProgress?: boolean): Observable<Array<TipoEvasione>>;
    public getTipoEvasione(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TipoEvasione>>>;
    public getTipoEvasione(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TipoEvasione>>>;
    public getTipoEvasione(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TipoEvasione>>(`${this.basePath}/decodifica/tipo-evasione`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce i TipoOrdine registrati su sistema.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTipoOrdine(observe?: 'body', reportProgress?: boolean): Observable<Array<TipoOrdine>>;
    public getTipoOrdine(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TipoOrdine>>>;
    public getTipoOrdine(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TipoOrdine>>>;
    public getTipoOrdine(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TipoOrdine>>(`${this.basePath}/decodifica/tipo-ordine`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce i TipoProcedura registrati su sistema.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTipoProcedura(observe?: 'body', reportProgress?: boolean): Observable<Array<TipoProcedura>>;
    public getTipoProcedura(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TipoProcedura>>>;
    public getTipoProcedura(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TipoProcedura>>>;
    public getTipoProcedura(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TipoProcedura>>(`${this.basePath}/decodifica/tipo-procedura`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce le Unita Misura registrate su sistema.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUnitaMisura(observe?: 'body', reportProgress?: boolean): Observable<Array<UnitaMisura>>;
    public getUnitaMisura(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<UnitaMisura>>>;
    public getUnitaMisura(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<UnitaMisura>>>;
    public getUnitaMisura(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<UnitaMisura>>(`${this.basePath}/decodifica/unita-misura`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
