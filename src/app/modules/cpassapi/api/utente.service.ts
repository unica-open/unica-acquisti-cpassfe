/*
* SPDX-FileCopyrightText: Copyright 2019 - 2020 | CSI Piemonte
* SPDX-License-Identifier: EUPL-1.2
*/
/**
 * Contabilità passiva
 * API per il backend della suite di contabilità passiva.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ApiError } from '../model/apiError';
import { Modulo } from '../model/modulo';
import { Permesso } from '../model/permesso';
import { Ruolo } from '../model/ruolo';
import { Settore } from '../model/settore';
import { SettoreRuoliPermessi } from '../model/settoreRuoliPermessi';
import { Utente } from '../model/utente';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration, FormParams }                         from '../configuration';
import { UtenteServiceInterface }                            from './utente.serviceInterface';


@Injectable()
export class UtenteService implements UtenteServiceInterface {

    protected basePath = 'http://localhost:8080/cpassbe/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Cancella l&#39;utente per id.
     * @param id L&#39;id dell&#39;utente.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteUtenteById(id: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public deleteUtenteById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public deleteUtenteById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public deleteUtenteById(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteUtenteById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<string>(`${this.basePath}/utente/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce i moduli di un determinato settore.
     * @param id_settore L&#39;id del settore dell&#39;utente.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getModuliBySettore(id_settore: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Modulo>>;
    public getModuliBySettore(id_settore: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Modulo>>>;
    public getModuliBySettore(id_settore: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Modulo>>>;
    public getModuliBySettore(id_settore: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_settore === null || id_settore === undefined) {
            throw new Error('Required parameter id_settore was null or undefined when calling getModuliBySettore.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Modulo>>(`${this.basePath}/utente/settore/${encodeURIComponent(String(id_settore))}/modulo`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce le i permessi di un determinato utente, settore e modulo.
     * @param id_settore L&#39;id del settore.
     * @param id_modulo L&#39;id del modulo.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPermessiBySettoreAndModulo(id_settore: string, id_modulo: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Permesso>>;
    public getPermessiBySettoreAndModulo(id_settore: string, id_modulo: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Permesso>>>;
    public getPermessiBySettoreAndModulo(id_settore: string, id_modulo: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Permesso>>>;
    public getPermessiBySettoreAndModulo(id_settore: string, id_modulo: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_settore === null || id_settore === undefined) {
            throw new Error('Required parameter id_settore was null or undefined when calling getPermessiBySettoreAndModulo.');
        }
        if (id_modulo === null || id_modulo === undefined) {
            throw new Error('Required parameter id_modulo was null or undefined when calling getPermessiBySettoreAndModulo.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Permesso>>(`${this.basePath}/utente/settore/${encodeURIComponent(String(id_settore))}/modulo/${encodeURIComponent(String(id_modulo))}/permesso`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce i ruoli di un utente per un determinato settore.
     * @param id_settore L&#39;id del settore dell&#39;utente.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRuoliBySettore(id_settore: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Ruolo>>;
    public getRuoliBySettore(id_settore: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Ruolo>>>;
    public getRuoliBySettore(id_settore: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Ruolo>>>;
    public getRuoliBySettore(id_settore: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_settore === null || id_settore === undefined) {
            throw new Error('Required parameter id_settore was null or undefined when calling getRuoliBySettore.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Ruolo>>(`${this.basePath}/utente/ruoli/settore/${encodeURIComponent(String(id_settore))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce una lista di utenti rup legati al settore.
     * @param id_settore L&#39;id del settore.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRupsBySettoreId(id_settore: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Utente>>;
    public getRupsBySettoreId(id_settore: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Utente>>>;
    public getRupsBySettoreId(id_settore: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Utente>>>;
    public getRupsBySettoreId(id_settore: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_settore === null || id_settore === undefined) {
            throw new Error('Required parameter id_settore was null or undefined when calling getRupsBySettoreId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Utente>>(`${this.basePath}/utente/rups/settore/${encodeURIComponent(String(id_settore))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce una lista di settori legati al RUP.
     * @param id_rup L&#39;id del rup.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSettoriByRupId(id_rup: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Settore>>;
    public getSettoriByRupId(id_rup: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Settore>>>;
    public getSettoriByRupId(id_rup: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Settore>>>;
    public getSettoriByRupId(id_rup: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_rup === null || id_rup === undefined) {
            throw new Error('Required parameter id_rup was null or undefined when calling getSettoriByRupId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Settore>>(`${this.basePath}/utente/settore-rup/${encodeURIComponent(String(id_rup))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce i settori di un determinato utente.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSettoriByUtente(observe?: 'body', reportProgress?: boolean): Observable<Array<Settore>>;
    public getSettoriByUtente(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Settore>>>;
    public getSettoriByUtente(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Settore>>>;
    public getSettoriByUtente(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Settore>>(`${this.basePath}/utente/settore`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce i ruoli settori e permessi dell&#39; utente connesso.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSettoriRuoliPermessiByUtente(observe?: 'body', reportProgress?: boolean): Observable<Array<SettoreRuoliPermessi>>;
    public getSettoriRuoliPermessiByUtente(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SettoreRuoliPermessi>>>;
    public getSettoriRuoliPermessiByUtente(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SettoreRuoliPermessi>>>;
    public getSettoriRuoliPermessiByUtente(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<SettoreRuoliPermessi>>(`${this.basePath}/utente/settori/ruoli/permessi`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce l&#39;utente per id.
     * @param id L&#39;id dell&#39;utente.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUtenteById(id: string, observe?: 'body', reportProgress?: boolean): Observable<Utente>;
    public getUtenteById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Utente>>;
    public getUtenteById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Utente>>;
    public getUtenteById(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getUtenteById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Utente>(`${this.basePath}/utente/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce gli utenti di un determinato settore.
     * @param id_settore L&#39;id del settore dell&#39;utente.
     * @param ruolo_codice codice del ruolo.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUtenteBySettoreRuolo(id_settore: string, ruolo_codice: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Utente>>;
    public getUtenteBySettoreRuolo(id_settore: string, ruolo_codice: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Utente>>>;
    public getUtenteBySettoreRuolo(id_settore: string, ruolo_codice: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Utente>>>;
    public getUtenteBySettoreRuolo(id_settore: string, ruolo_codice: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id_settore === null || id_settore === undefined) {
            throw new Error('Required parameter id_settore was null or undefined when calling getUtenteBySettoreRuolo.');
        }
        if (ruolo_codice === null || ruolo_codice === undefined) {
            throw new Error('Required parameter ruolo_codice was null or undefined when calling getUtenteBySettoreRuolo.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Utente>>(`${this.basePath}/utente/settore/${encodeURIComponent(String(id_settore))}/ruolo/${encodeURIComponent(String(ruolo_codice))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce l&#39;utente che effettua la chiamata.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUtenteSelf(observe?: 'body', reportProgress?: boolean): Observable<Utente>;
    public getUtenteSelf(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Utente>>;
    public getUtenteSelf(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Utente>>;
    public getUtenteSelf(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Utente>(`${this.basePath}/utente/self`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Restituisce gli utenti .
     * @param offset Il numero di record da ignorare prima di iniziare a raccogliere i risultati.
     * @param limit Il numero di record da restituire.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUtenti(offset?: number, limit?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Utente>>;
    public getUtenti(offset?: number, limit?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Utente>>>;
    public getUtenti(offset?: number, limit?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Utente>>>;
    public getUtenti(offset?: number, limit?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Utente>>(`${this.basePath}/utente`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Inserisce un utente su sistema.
     * @param utente 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postUtente(utente: Utente, observe?: 'body', reportProgress?: boolean): Observable<Utente>;
    public postUtente(utente: Utente, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Utente>>;
    public postUtente(utente: Utente, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Utente>>;
    public postUtente(utente: Utente, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (utente === null || utente === undefined) {
            throw new Error('Required parameter utente was null or undefined when calling postUtente.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Utente>(`${this.basePath}/utente`,
            utente,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Aggiorna l&#39;Elaborazione per id.
     * @param id L&#39;id dell&#39;utente.
     * @param utente 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putElaborazioneById(id: string, utente: Utente, observe?: 'body', reportProgress?: boolean): Observable<Utente>;
    public putElaborazioneById(id: string, utente: Utente, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Utente>>;
    public putElaborazioneById(id: string, utente: Utente, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Utente>>;
    public putElaborazioneById(id: string, utente: Utente, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putElaborazioneById.');
        }
        if (utente === null || utente === undefined) {
            throw new Error('Required parameter utente was null or undefined when calling putElaborazioneById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Utente>(`${this.basePath}/elaborazione/${encodeURIComponent(String(id))}`,
            utente,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Aggiorna l&#39;utente per id.
     * @param id L&#39;id dell&#39;utente.
     * @param utente 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putUtenteById(id: string, utente: Utente, observe?: 'body', reportProgress?: boolean): Observable<Utente>;
    public putUtenteById(id: string, utente: Utente, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Utente>>;
    public putUtenteById(id: string, utente: Utente, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Utente>>;
    public putUtenteById(id: string, utente: Utente, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putUtenteById.');
        }
        if (utente === null || utente === undefined) {
            throw new Error('Required parameter utente was null or undefined when calling putUtenteById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Utente>(`${this.basePath}/utente/${encodeURIComponent(String(id))}`,
            utente,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
