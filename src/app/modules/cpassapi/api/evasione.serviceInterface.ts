/*
* SPDX-FileCopyrightText: Copyright 2019 - 2020 | CSI Piemonte
* SPDX-License-Identifier: EUPL-1.2
*/
/**
 * Contabilità passiva
 * API per il backend della suite di contabilità passiva.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { ApiError } from '../model/apiError';
import { ControllaEvasione } from '../model/controllaEvasione';
import { DestinatarioEvasione } from '../model/destinatarioEvasione';
import { ImpegnoEvasione } from '../model/impegnoEvasione';
import { PagedResponseEvasione } from '../model/pagedResponseEvasione';
import { RicercaEvasioni } from '../model/ricercaEvasioni';
import { RiepilogoFatturaEvasione } from '../model/riepilogoFatturaEvasione';
import { RigaEvasione } from '../model/rigaEvasione';
import { RigaOrdine } from '../model/rigaOrdine';
import { SalvaEvasione } from '../model/salvaEvasione';
import { SalvaImpegniEvasione } from '../model/salvaImpegniEvasione';
import { TestataEvasione } from '../model/testataEvasione';


import { Configuration }                                     from '../configuration';


export interface EvasioneServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    

    /**
    * 
    * Elimina il destinatario evasione di una testata evasione presente a sistema.
    * @param id L&#39;id del destinatario evasione.
    */
    deleteDestinatarioEvasione(id: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * 
    * Elimina l&#39;evasione presente a sistema.
    * @param testata_evasione_id L&#39;id della testata evasione.
    */
    deleteEvasione(testata_evasione_id: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * 
    * Elimina gli impegni evasione di una riga evasione presente a sistema.
    * @param riga_evasione_id L&#39;id della riga evasione.
    */
    deleteImpegniEvasioneByRiga(riga_evasione_id: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * 
    * Elimina la riga evasione presente a sistema.
    * @param id L&#39;id della riga evasione.
    */
    deleteRigaEvasione(id: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * 
    * Restituisce gli impegni legati a una riga evasione
    * @param id L&#39;id della riga evasione.
    * @param bDistribuzioneTotaleRigaSugliImpegni Per calcolare la Distribuzione Totale Riga Sugli Impegni.
    */
    getEsposizioneImpegniByRigaOrdine(id: string, bDistribuzioneTotaleRigaSugliImpegni: boolean, extraHttpRequestParams?: any): Observable<Array<ImpegnoEvasione>>;

    /**
    * 
    * Restituisce le evasioni registrate su sistema.
    * @param ricercaEvasioni 
    * @param offset Il numero di record da ignorare prima di iniziare a raccogliere i risultati.
    * @param limit Il numero di record da restituire.
    * @param sort Il campo di sort.
    * @param direction La direzione di sort.
    */
    getRicercaEvasioni(ricercaEvasioni: RicercaEvasioni, offset?: number, limit?: number, sort?: string, direction?: 'asc' | 'desc' | '', extraHttpRequestParams?: any): Observable<PagedResponseEvasione>;

    /**
    * 
    * Restituisce gli impegni legati a una riga evasione.
    * @param id L&#39;id della riga evasione.
    */
    getRicercaImpegniByRigaEvasione(id: string, extraHttpRequestParams?: any): Observable<Array<ImpegnoEvasione>>;

    /**
    * 
    * Restituisce le righe legate a un destinatario.
    * @param id L&#39;id del destinatario.
    */
    getRicercaRigheByDestinatario(id: string, extraHttpRequestParams?: any): Observable<Array<RigaEvasione>>;

    /**
    * 
    * Restituisce la testataEvasione per anno e numero e ente.
    * @param anno L&#39;anno della testata evasione.
    * @param numero Il numero della testata evasione.
    * @param idEnte L&#39;id dell&#39;ente associato all&#39;utente.
    */
    getRicercaTestataEvasioneByAnnoENum(anno: number, numero: number, idEnte: string, extraHttpRequestParams?: any): Observable<TestataEvasione>;

    /**
    * 
    * Restituisce gli impegni legati a una testata evasione.
    * @param id L&#39;id della testata evasione.
    */
    getRiepilogoFatturaByIdEvasione(id: string, extraHttpRequestParams?: any): Observable<Array<RiepilogoFatturaEvasione>>;

    /**
    * 
    * Restituisce le righe ordine
    * @param anno Anno ordine.
    * @param numero Numero ordine.
    */
    getRigheOrdineDaEvadereByOrdineAnnoNumero(anno: number, numero: number, extraHttpRequestParams?: any): Observable<Array<RigaOrdine>>;

    /**
    * 
    * Restituisce la testataEvasione per id.
    * @param id L&#39;id della testataEvasione.
    */
    getTestataEvasioneById(id: string, extraHttpRequestParams?: any): Observable<TestataEvasione>;

    /**
    * 
    * Inserisce gli impegni evasione su sistema.
    * @param salvaImpegniEvasione 
    */
    postImpegniEvasione(salvaImpegniEvasione: SalvaImpegniEvasione, extraHttpRequestParams?: any): Observable<Array<ImpegnoEvasione>>;

    /**
    * 
    * Inserisce una testata evasione su sistema.
    * @param salvaEvasione 
    */
    postTestataEvasione(salvaEvasione: SalvaEvasione, extraHttpRequestParams?: any): Observable<TestataEvasione>;

    /**
    * 
    * Annulla evasione.
    * @param id L&#39;id della testataEvasione.
    */
    putEvasioneAnnullaById(id: string, extraHttpRequestParams?: any): Observable<TestataEvasione>;

    /**
    * 
    * Autorizza evasione.
    * @param id L&#39;id della testataEvasione.
    * @param testataEvasione 
    */
    putEvasioneAutorizzaById(id: string, testataEvasione: TestataEvasione, extraHttpRequestParams?: any): Observable<TestataEvasione>;

    /**
    * 
    * Controlla evasione.
    * @param id L&#39;id della testataEvasione.
    * @param controllaEvasione 
    */
    putEvasioneControllaById(id: string, controllaEvasione: ControllaEvasione, extraHttpRequestParams?: any): Observable<TestataEvasione>;

    /**
    * 
    * Inserisce il destinatario di una testata evasione su sistema.
    * @param destinatarioEvasione 
    */
    putEvasioneDestinatario(destinatarioEvasione: DestinatarioEvasione, extraHttpRequestParams?: any): Observable<DestinatarioEvasione>;

    /**
    * 
    * Invia Contabilita evasione.
    * @param id L&#39;id della testataEvasione.
    */
    putEvasioneInviaContabilitaById(id: string, extraHttpRequestParams?: any): Observable<TestataEvasione>;

    /**
    * 
    * Verifiche Preliminari Annulla evasione.
    * @param id L&#39;id della testataEvasione.
    */
    putEvasioneVerifichePreliminariAnnullaById(id: string, extraHttpRequestParams?: any): Observable<TestataEvasione>;

    /**
    * 
    * Aggiorna gli impegni evasione su sistema.
    * @param salvaImpegniEvasione 
    */
    putImpegniEvasione(salvaImpegniEvasione: SalvaImpegniEvasione, extraHttpRequestParams?: any): Observable<Array<ImpegnoEvasione>>;

    /**
    * 
    * Aggiorna la testataEvasione per id.
    * @param id L&#39;id della testataEvasione.
    * @param testataEvasione 
    */
    putTestataEvasioneById(id: string, testataEvasione: TestataEvasione, extraHttpRequestParams?: any): Observable<TestataEvasione>;

    /**
    * 
    * Aggiorna la testataEvasione per i campi legati al Riepilogo Fattura in base all&#39;id della testata evasione.
    * @param id L&#39;id della testataEvasione.
    * @param testataEvasione 
    * @param bypass Attiva il bypass del controllo sulla tolleranza se l&#39;utente ha accettato di proseguire con l&#39;operazione nonostante il warning.
    * @param bypassFornitoreControl Attiva il bypass del controllo congruenza fornitori se l&#39;utente ha accettato di proseguire con l&#39;operazione nonostante il warning.
    */
    putTestataEvasionePerRiepilogoFattura(id: string, testataEvasione: TestataEvasione, bypass?: boolean, bypassFornitoreControl?: boolean, extraHttpRequestParams?: any): Observable<TestataEvasione>;

}
